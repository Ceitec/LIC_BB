
LIC_BB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000188  00800100  00800100  00000d76  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000160  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000172c  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000064f  00000000  00000000  00002632  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001020  00000000  00000000  00002c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000370  00000000  00000000  00003ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000704  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000a84  00000000  00000000  00004718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  0000519c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	d3 c5       	rjmp	.+2982   	; 0xbd4 <__vector_11>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	2c c4       	rjmp	.+2136   	; 0x8a2 <__vector_18>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	59 c4       	rjmp	.+2226   	; 0x904 <__vector_20>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c3 05       	cpc	r28, r3
  8e:	c6 05       	cpc	r28, r6
  90:	c9 05       	cpc	r28, r9
  92:	cc 05       	cpc	r28, r12
  94:	cf 05       	cpc	r28, r15
  96:	d2 05       	cpc	r29, r2
  98:	d5 05       	cpc	r29, r5
  9a:	d8 05       	cpc	r29, r8
  9c:	db 05       	cpc	r29, r11
  9e:	de 05       	cpc	r29, r14
  a0:	e1 05       	cpc	r30, r1

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e1       	ldi	r29, 0x10	; 16
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e2 e0       	ldi	r30, 0x02	; 2
  b6:	fd e0       	ldi	r31, 0x0D	; 13
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a0 30       	cpi	r26, 0x00	; 0
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	22 e0       	ldi	r18, 0x02	; 2
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a8 38       	cpi	r26, 0x88	; 136
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	bb d5       	rcall	.+2934   	; 0xc50 <main>
  da:	11 c6       	rjmp	.+3106   	; 0xcfe <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <timer_init>:

  // * Timer 1 - system timer and 2× PWM
  // 14745600 / 256 / 576 = 100 Hz
  //   Xtal  /presca/ TOP
  
  OCR1A = 0;
  de:	1b bc       	out	0x2b, r1	; 43
  e0:	1a bc       	out	0x2a, r1	; 42
  OCR1B = 0;
  e2:	19 bc       	out	0x29, r1	; 41
  e4:	18 bc       	out	0x28, r1	; 40
  ICR1 = 575; 
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	97 bd       	out	0x27, r25	; 39
  ec:	86 bd       	out	0x26, r24	; 38
  TCCR1A = BV(WGM11) | BV(COM1A1) | BV(COM1B1); // Fast PWM
  ee:	82 ea       	ldi	r24, 0xA2	; 162
  f0:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = BV(WGM12) | BV(WGM13) | 4; // Fast PWM + presca = 1024
  f2:	8c e1       	ldi	r24, 0x1C	; 28
  f4:	8e bd       	out	0x2e, r24	; 46
  TIMSK |= BV(TICIE1); // capt int enabled
  f6:	87 b7       	in	r24, 0x37	; 55
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	87 bf       	out	0x37, r24	; 55
  fc:	08 95       	ret

000000fe <TB_Send>:
  TB_bufOut[5] = value >> 16;
  TB_bufOut[6] = value >> 8;
  TB_bufOut[7] = value >> 0;
  TB_calcSum();
  TB_Send();
}
  fe:	e0 91 02 01 	lds	r30, 0x0102
 102:	f0 91 03 01 	lds	r31, 0x0103
 106:	30 97       	sbiw	r30, 0x00	; 0
 108:	09 f0       	breq	.+2      	; 0x10c <TB_Send+0xe>
 10a:	09 95       	icall
 10c:	08 95       	ret

0000010e <TB_calcSum>:
 10e:	e3 e3       	ldi	r30, 0x33	; 51
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	8b e3       	ldi	r24, 0x3B	; 59
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	31 91       	ld	r19, Z+
 11a:	23 0f       	add	r18, r19
 11c:	e8 17       	cp	r30, r24
 11e:	f9 07       	cpc	r31, r25
 120:	d9 f7       	brne	.-10     	; 0x118 <TB_calcSum+0xa>
 122:	20 93 3b 01 	sts	0x013B, r18
 126:	08 95       	ret

00000128 <TB_Init>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	90 93 4d 01 	sts	0x014D, r25
 132:	80 93 4c 01 	sts	0x014C, r24
 136:	45 e0       	ldi	r20, 0x05	; 5
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	bc 01       	movw	r22, r24
 13c:	8c e3       	ldi	r24, 0x3C	; 60
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	a7 d5       	rcall	.+2894   	; 0xc90 <__eerd_block_m128a>
 142:	80 91 3c 01 	lds	r24, 0x013C
 146:	81 34       	cpi	r24, 0x41	; 65
 148:	a1 f0       	breq	.+40     	; 0x172 <TB_Init+0x4a>
 14a:	82 e4       	ldi	r24, 0x42	; 66
 14c:	80 93 3c 01 	sts	0x013C, r24
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	80 93 3d 01 	sts	0x013D, r24
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	80 93 3e 01 	sts	0x013E, r24
 15c:	10 92 3f 01 	sts	0x013F, r1
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 40 01 	sts	0x0140, r24
 166:	45 e0       	ldi	r20, 0x05	; 5
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	be 01       	movw	r22, r28
 16c:	8c e3       	ldi	r24, 0x3C	; 60
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	b0 d5       	rcall	.+2912   	; 0xcd2 <__eewr_block_m128a>
 172:	e0 91 00 01 	lds	r30, 0x0100
 176:	f0 91 01 01 	lds	r31, 0x0101
 17a:	30 97       	sbiw	r30, 0x00	; 0
 17c:	19 f0       	breq	.+6      	; 0x184 <TB_Init+0x5c>
 17e:	80 91 3d 01 	lds	r24, 0x013D
 182:	09 95       	icall
 184:	80 91 40 01 	lds	r24, 0x0140
 188:	80 93 4e 01 	sts	0x014E, r24
 18c:	80 91 3e 01 	lds	r24, 0x013E
 190:	80 93 42 01 	sts	0x0142, r24
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <TB_SendAck>:

/******************************************************/
// send response from module
void TB_SendAck(byte status, long int value)
{
  TB_bufOut[0] = TB_AddrReply;
 19a:	90 91 4e 01 	lds	r25, 0x014E
 19e:	90 93 33 01 	sts	0x0133, r25
  TB_bufOut[1] = TB_AddrModule;
 1a2:	90 91 42 01 	lds	r25, 0x0142
 1a6:	90 93 34 01 	sts	0x0134, r25
  TB_bufOut[2] = status;
 1aa:	80 93 35 01 	sts	0x0135, r24
  TB_bufOut[3] = TB_bufIn[TB_BUF_COMMAND]; //command;
 1ae:	80 91 44 01 	lds	r24, 0x0144
 1b2:	80 93 36 01 	sts	0x0136, r24
  TB_bufOut[4] = value >> 24;
 1b6:	70 93 37 01 	sts	0x0137, r23
  TB_bufOut[5] = value >> 16;
 1ba:	60 93 38 01 	sts	0x0138, r22
  TB_bufOut[6] = value >> 8;
 1be:	50 93 39 01 	sts	0x0139, r21
  TB_bufOut[7] = value >> 0;
 1c2:	40 93 3a 01 	sts	0x013A, r20
  TB_calcSum();
 1c6:	a3 df       	rcall	.-186    	; 0x10e <TB_calcSum>
  TB_Send();
 1c8:	9a cf       	rjmp	.-204    	; 0xfe <TB_Send>
 1ca:	08 95       	ret

000001cc <TB_Read>:
{
  byte i;
  byte sum;

  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
 1cc:	90 91 43 01 	lds	r25, 0x0143
 1d0:	80 91 42 01 	lds	r24, 0x0142
 1d4:	98 13       	cpse	r25, r24
 1d6:	15 c0       	rjmp	.+42     	; 0x202 <TB_Read+0x36>
 1d8:	e3 e4       	ldi	r30, 0x43	; 67
 1da:	f1 e0       	ldi	r31, 0x01	; 1
 1dc:	8b e4       	ldi	r24, 0x4B	; 75
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	20 e0       	ldi	r18, 0x00	; 0
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
    sum += TB_bufIn[i];
 1e2:	31 91       	ld	r19, Z+
 1e4:	23 0f       	add	r18, r19
  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
 1e6:	e8 17       	cp	r30, r24
 1e8:	f9 07       	cpc	r31, r25
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <TB_Read+0x16>
    sum += TB_bufIn[i];
  }
  if (sum != TB_bufIn[TB_BUF_SUM]) {
 1ec:	80 91 4b 01 	lds	r24, 0x014B
 1f0:	28 17       	cp	r18, r24
 1f2:	49 f0       	breq	.+18     	; 0x206 <TB_Read+0x3a>
    TB_SendAck(1, 0); // wrong checksum
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	ba 01       	movw	r22, r20
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	ce df       	rcall	.-100    	; 0x19a <TB_SendAck>
    return 3; // bad checksum
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	08 95       	ret
{
  byte i;
  byte sum;

  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	08 95       	ret
    TB_SendAck(1, 0); // wrong checksum
    return 3; // bad checksum
  }

  // we have valid data in TB_bufIn
  return 0;
 206:	80 e0       	ldi	r24, 0x00	; 0
}
 208:	08 95       	ret

0000020a <TB_Decode>:

/******************************************************/
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
 218:	20 91 47 01 	lds	r18, 0x0147
             (((int32_t) TB_bufIn[5]) << 16) |
 21c:	60 91 48 01 	lds	r22, 0x0148
 220:	86 2f       	mov	r24, r22
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	dc 01       	movw	r26, r24
 22a:	99 27       	eor	r25, r25
 22c:	88 27       	eor	r24, r24
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
 22e:	b2 2b       	or	r27, r18
             (((int32_t) TB_bufIn[5]) << 16) |
             (((int32_t) TB_bufIn[6]) <<  8) |
             (((int32_t) TB_bufIn[7])      ) ;
 230:	20 91 4a 01 	lds	r18, 0x014A
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
             (((int32_t) TB_bufIn[5]) << 16) |
 234:	82 2b       	or	r24, r18
             (((int32_t) TB_bufIn[6]) <<  8) |
 236:	20 91 49 01 	lds	r18, 0x0149
 23a:	bc 01       	movw	r22, r24
 23c:	cd 01       	movw	r24, r26
 23e:	72 2b       	or	r23, r18
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
 240:	60 93 2f 01 	sts	0x012F, r22
 244:	70 93 30 01 	sts	0x0130, r23
 248:	80 93 31 01 	sts	0x0131, r24
 24c:	90 93 32 01 	sts	0x0132, r25
             (((int32_t) TB_bufIn[5]) << 16) |
             (((int32_t) TB_bufIn[6]) <<  8) |
             (((int32_t) TB_bufIn[7])      ) ;

  switch (TB_bufIn[TB_BUF_COMMAND]) {
 250:	20 91 44 01 	lds	r18, 0x0144
 254:	2a 30       	cpi	r18, 0x0A	; 10
 256:	09 f4       	brne	.+2      	; 0x25a <TB_Decode+0x50>
 258:	61 c2       	rjmp	.+1218   	; 0x71c <TB_Decode+0x512>
 25a:	88 f4       	brcc	.+34     	; 0x27e <TB_Decode+0x74>
 25c:	24 30       	cpi	r18, 0x04	; 4
 25e:	09 f4       	brne	.+2      	; 0x262 <TB_Decode+0x58>
 260:	cf c2       	rjmp	.+1438   	; 0x800 <TB_Decode+0x5f6>
 262:	28 f4       	brcc	.+10     	; 0x26e <TB_Decode+0x64>
 264:	21 30       	cpi	r18, 0x01	; 1
 266:	19 f1       	breq	.+70     	; 0x2ae <TB_Decode+0xa4>
 268:	22 30       	cpi	r18, 0x02	; 2
 26a:	41 f1       	breq	.+80     	; 0x2bc <TB_Decode+0xb2>
 26c:	c2 c2       	rjmp	.+1412   	; 0x7f2 <TB_Decode+0x5e8>
 26e:	26 30       	cpi	r18, 0x06	; 6
 270:	09 f4       	brne	.+2      	; 0x274 <TB_Decode+0x6a>
 272:	72 c0       	rjmp	.+228    	; 0x358 <TB_Decode+0x14e>
 274:	50 f1       	brcs	.+84     	; 0x2ca <TB_Decode+0xc0>
 276:	29 30       	cpi	r18, 0x09	; 9
 278:	09 f4       	brne	.+2      	; 0x27c <TB_Decode+0x72>
 27a:	b8 c1       	rjmp	.+880    	; 0x5ec <TB_Decode+0x3e2>
 27c:	ba c2       	rjmp	.+1396   	; 0x7f2 <TB_Decode+0x5e8>
 27e:	20 31       	cpi	r18, 0x10	; 16
 280:	09 f4       	brne	.+2      	; 0x284 <TB_Decode+0x7a>
 282:	ae c1       	rjmp	.+860    	; 0x5e0 <TB_Decode+0x3d6>
 284:	48 f4       	brcc	.+18     	; 0x298 <TB_Decode+0x8e>
 286:	2e 30       	cpi	r18, 0x0E	; 14
 288:	09 f4       	brne	.+2      	; 0x28c <TB_Decode+0x82>
 28a:	df c0       	rjmp	.+446    	; 0x44a <TB_Decode+0x240>
 28c:	08 f0       	brcs	.+2      	; 0x290 <TB_Decode+0x86>
 28e:	3c c1       	rjmp	.+632    	; 0x508 <TB_Decode+0x2fe>
 290:	2d 30       	cpi	r18, 0x0D	; 13
 292:	09 f4       	brne	.+2      	; 0x296 <TB_Decode+0x8c>
 294:	a9 c1       	rjmp	.+850    	; 0x5e8 <TB_Decode+0x3de>
 296:	ad c2       	rjmp	.+1370   	; 0x7f2 <TB_Decode+0x5e8>
 298:	28 38       	cpi	r18, 0x88	; 136
 29a:	09 f4       	brne	.+2      	; 0x29e <TB_Decode+0x94>
 29c:	82 c2       	rjmp	.+1284   	; 0x7a2 <TB_Decode+0x598>
 29e:	2e 3f       	cpi	r18, 0xFE	; 254
 2a0:	21 f0       	breq	.+8      	; 0x2aa <TB_Decode+0xa0>
 2a2:	21 31       	cpi	r18, 0x11	; 17
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <TB_Decode+0x9e>
 2a6:	a5 c2       	rjmp	.+1354   	; 0x7f2 <TB_Decode+0x5e8>
 2a8:	9d c1       	rjmp	.+826    	; 0x5e4 <TB_Decode+0x3da>
    case TB_CMD_DEBUG:
      return TB_CMD_DEBUG;
 2aa:	8e ef       	ldi	r24, 0xFE	; 254
 2ac:	ae c2       	rjmp	.+1372   	; 0x80a <TB_Decode+0x600>
      break;
    case TB_CMD_ROR:
      TB_SendAck(TB_ERR_OK, 0);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	ba 01       	movw	r22, r20
 2b4:	84 e6       	ldi	r24, 0x64	; 100
 2b6:	71 df       	rcall	.-286    	; 0x19a <TB_SendAck>
      return TB_CMD_ROR;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	a7 c2       	rjmp	.+1358   	; 0x80a <TB_Decode+0x600>
      break;
    case TB_CMD_ROL:
      TB_SendAck(TB_ERR_OK, 0);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	ba 01       	movw	r22, r20
 2c2:	84 e6       	ldi	r24, 0x64	; 100
 2c4:	6a df       	rcall	.-300    	; 0x19a <TB_SendAck>
      return TB_CMD_ROL;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	a0 c2       	rjmp	.+1344   	; 0x80a <TB_Decode+0x600>
      break;
    case TB_CMD_MVP:
      return TB_CMD_MVP;
      break;
    case TB_CMD_SAP: // set axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
 2ca:	20 91 46 01 	lds	r18, 0x0146
 2ce:	22 23       	and	r18, r18
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <TB_Decode+0xd6>
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	ba 01       	movw	r22, r20
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	5f df       	rcall	.-322    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	95 c2       	rjmp	.+1322   	; 0x80a <TB_Decode+0x600>
      break;
    case TB_CMD_SAP: // set axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
 2e0:	20 91 45 01 	lds	r18, 0x0145
 2e4:	26 30       	cpi	r18, 0x06	; 6
 2e6:	e9 f0       	breq	.+58     	; 0x322 <TB_Decode+0x118>
 2e8:	28 f4       	brcc	.+10     	; 0x2f4 <TB_Decode+0xea>
 2ea:	24 30       	cpi	r18, 0x04	; 4
 2ec:	41 f0       	breq	.+16     	; 0x2fe <TB_Decode+0xf4>
 2ee:	25 30       	cpi	r18, 0x05	; 5
 2f0:	79 f0       	breq	.+30     	; 0x310 <TB_Decode+0x106>
 2f2:	2b c0       	rjmp	.+86     	; 0x34a <TB_Decode+0x140>
 2f4:	27 30       	cpi	r18, 0x07	; 7
 2f6:	f1 f0       	breq	.+60     	; 0x334 <TB_Decode+0x12a>
 2f8:	2c 38       	cpi	r18, 0x8C	; 140
 2fa:	29 f1       	breq	.+74     	; 0x346 <TB_Decode+0x13c>
 2fc:	26 c0       	rjmp	.+76     	; 0x34a <TB_Decode+0x140>
          case TB_PARAM_SPEED:
            TB_param.speed = TB_Value;
 2fe:	60 93 1a 01 	sts	0x011A, r22
 302:	70 93 1b 01 	sts	0x011B, r23
 306:	80 93 1c 01 	sts	0x011C, r24
 30a:	90 93 1d 01 	sts	0x011D, r25
            break;
 30e:	1d c0       	rjmp	.+58     	; 0x34a <TB_Decode+0x140>
          case TB_PARAM_ACCELERATION:
            TB_param.acceleration = TB_Value;
 310:	60 93 1e 01 	sts	0x011E, r22
 314:	70 93 1f 01 	sts	0x011F, r23
 318:	80 93 20 01 	sts	0x0120, r24
 31c:	90 93 21 01 	sts	0x0121, r25
            break;
 320:	14 c0       	rjmp	.+40     	; 0x34a <TB_Decode+0x140>
          case TB_PARAM_CURRENT_RUN:
            TB_param.current = TB_Value;
 322:	60 93 22 01 	sts	0x0122, r22
 326:	70 93 23 01 	sts	0x0123, r23
 32a:	80 93 24 01 	sts	0x0124, r24
 32e:	90 93 25 01 	sts	0x0125, r25
            break;
 332:	0b c0       	rjmp	.+22     	; 0x34a <TB_Decode+0x140>
          case TB_PARAM_CURRENT_HOLD:
            TB_param.current_hold = TB_Value;
 334:	60 93 26 01 	sts	0x0126, r22
 338:	70 93 27 01 	sts	0x0127, r23
 33c:	80 93 28 01 	sts	0x0128, r24
 340:	90 93 29 01 	sts	0x0129, r25
            break;
 344:	02 c0       	rjmp	.+4      	; 0x34a <TB_Decode+0x140>
          case TB_PARAM_RESOLUTION:
            TB_param.resolution = TB_Value;
 346:	60 93 2a 01 	sts	0x012A, r22

/******************************************************/
// send OK response from module
inline void TB_SendAckOK(void)
{
  TB_SendAck(100, 0);
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	ba 01       	movw	r22, r20
 350:	84 e6       	ldi	r24, 0x64	; 100
 352:	23 df       	rcall	.-442    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	59 c2       	rjmp	.+1202   	; 0x80a <TB_Decode+0x600>
        }
        TB_SendAckOK();
      }
      break;
    case TB_CMD_GAP: // get axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
 358:	80 91 46 01 	lds	r24, 0x0146
 35c:	88 23       	and	r24, r24
 35e:	39 f0       	breq	.+14     	; 0x36e <TB_Decode+0x164>
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	ba 01       	movw	r22, r20
 366:	84 e0       	ldi	r24, 0x04	; 4
 368:	18 df       	rcall	.-464    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	4e c2       	rjmp	.+1180   	; 0x80a <TB_Decode+0x600>
      break;
    case TB_CMD_GAP: // get axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
 36e:	80 91 45 01 	lds	r24, 0x0145
 372:	86 30       	cpi	r24, 0x06	; 6
 374:	51 f1       	breq	.+84     	; 0x3ca <TB_Decode+0x1c0>
 376:	38 f4       	brcc	.+14     	; 0x386 <TB_Decode+0x17c>
 378:	84 30       	cpi	r24, 0x04	; 4
 37a:	09 f4       	brne	.+2      	; 0x37e <TB_Decode+0x174>
 37c:	3e c0       	rjmp	.+124    	; 0x3fa <TB_Decode+0x1f0>
 37e:	c8 f4       	brcc	.+50     	; 0x3b2 <TB_Decode+0x1a8>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	59 f0       	breq	.+22     	; 0x39a <TB_Decode+0x190>
 384:	5b c0       	rjmp	.+182    	; 0x43c <TB_Decode+0x232>
 386:	8c 38       	cpi	r24, 0x8C	; 140
 388:	09 f4       	brne	.+2      	; 0x38c <TB_Decode+0x182>
 38a:	43 c0       	rjmp	.+134    	; 0x412 <TB_Decode+0x208>
 38c:	84 3c       	cpi	r24, 0xC4	; 196
 38e:	09 f4       	brne	.+2      	; 0x392 <TB_Decode+0x188>
 390:	49 c0       	rjmp	.+146    	; 0x424 <TB_Decode+0x21a>
 392:	87 30       	cpi	r24, 0x07	; 7
 394:	09 f0       	breq	.+2      	; 0x398 <TB_Decode+0x18e>
 396:	52 c0       	rjmp	.+164    	; 0x43c <TB_Decode+0x232>
 398:	24 c0       	rjmp	.+72     	; 0x3e2 <TB_Decode+0x1d8>
          case TB_PARAM_ACTUAL_POSITION:
            TB_SendAck(TB_ERR_OK, TB_param.actual_position);
 39a:	40 91 16 01 	lds	r20, 0x0116
 39e:	50 91 17 01 	lds	r21, 0x0117
 3a2:	60 91 18 01 	lds	r22, 0x0118
 3a6:	70 91 19 01 	lds	r23, 0x0119
 3aa:	84 e6       	ldi	r24, 0x64	; 100
 3ac:	f6 de       	rcall	.-532    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
          case TB_PARAM_ACTUAL_POSITION:
            TB_SendAck(TB_ERR_OK, TB_param.actual_position);
            break;
 3b0:	2c c2       	rjmp	.+1112   	; 0x80a <TB_Decode+0x600>
          case TB_PARAM_ACCELERATION:
            TB_SendAck(TB_ERR_OK, TB_param.acceleration);
 3b2:	40 91 1e 01 	lds	r20, 0x011E
 3b6:	50 91 1f 01 	lds	r21, 0x011F
 3ba:	60 91 20 01 	lds	r22, 0x0120
 3be:	70 91 21 01 	lds	r23, 0x0121
 3c2:	84 e6       	ldi	r24, 0x64	; 100
 3c4:	ea de       	rcall	.-556    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_ACTUAL_POSITION:
            TB_SendAck(TB_ERR_OK, TB_param.actual_position);
            break;
          case TB_PARAM_ACCELERATION:
            TB_SendAck(TB_ERR_OK, TB_param.acceleration);
            break;
 3c8:	20 c2       	rjmp	.+1088   	; 0x80a <TB_Decode+0x600>
          case TB_PARAM_CURRENT_RUN:
            TB_SendAck(TB_ERR_OK, TB_param.current);
 3ca:	40 91 22 01 	lds	r20, 0x0122
 3ce:	50 91 23 01 	lds	r21, 0x0123
 3d2:	60 91 24 01 	lds	r22, 0x0124
 3d6:	70 91 25 01 	lds	r23, 0x0125
 3da:	84 e6       	ldi	r24, 0x64	; 100
 3dc:	de de       	rcall	.-580    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 3de:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_ACCELERATION:
            TB_SendAck(TB_ERR_OK, TB_param.acceleration);
            break;
          case TB_PARAM_CURRENT_RUN:
            TB_SendAck(TB_ERR_OK, TB_param.current);
            break;
 3e0:	14 c2       	rjmp	.+1064   	; 0x80a <TB_Decode+0x600>
          case TB_PARAM_CURRENT_HOLD:
            TB_SendAck(TB_ERR_OK, TB_param.current_hold);
 3e2:	40 91 26 01 	lds	r20, 0x0126
 3e6:	50 91 27 01 	lds	r21, 0x0127
 3ea:	60 91 28 01 	lds	r22, 0x0128
 3ee:	70 91 29 01 	lds	r23, 0x0129
 3f2:	84 e6       	ldi	r24, 0x64	; 100
 3f4:	d2 de       	rcall	.-604    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_CURRENT_RUN:
            TB_SendAck(TB_ERR_OK, TB_param.current);
            break;
          case TB_PARAM_CURRENT_HOLD:
            TB_SendAck(TB_ERR_OK, TB_param.current_hold);
            break;
 3f8:	08 c2       	rjmp	.+1040   	; 0x80a <TB_Decode+0x600>
          case TB_PARAM_SPEED:
            TB_SendAck(TB_ERR_OK, TB_param.speed);
 3fa:	40 91 1a 01 	lds	r20, 0x011A
 3fe:	50 91 1b 01 	lds	r21, 0x011B
 402:	60 91 1c 01 	lds	r22, 0x011C
 406:	70 91 1d 01 	lds	r23, 0x011D
 40a:	84 e6       	ldi	r24, 0x64	; 100
 40c:	c6 de       	rcall	.-628    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 40e:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_CURRENT_HOLD:
            TB_SendAck(TB_ERR_OK, TB_param.current_hold);
            break;
          case TB_PARAM_SPEED:
            TB_SendAck(TB_ERR_OK, TB_param.speed);
            break;
 410:	fc c1       	rjmp	.+1016   	; 0x80a <TB_Decode+0x600>
          case TB_PARAM_RESOLUTION:
            TB_SendAck(TB_ERR_OK, TB_param.resolution);
 412:	40 91 2a 01 	lds	r20, 0x012A
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	84 e6       	ldi	r24, 0x64	; 100
 41e:	bd de       	rcall	.-646    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 420:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_SPEED:
            TB_SendAck(TB_ERR_OK, TB_param.speed);
            break;
          case TB_PARAM_RESOLUTION:
            TB_SendAck(TB_ERR_OK, TB_param.resolution);
            break;
 422:	f3 c1       	rjmp	.+998    	; 0x80a <TB_Decode+0x600>
          case TB_PARAM_RFS_DISTANCE:
            TB_SendAck(TB_ERR_OK, TB_param.rfs_distance);
 424:	40 91 2b 01 	lds	r20, 0x012B
 428:	50 91 2c 01 	lds	r21, 0x012C
 42c:	60 91 2d 01 	lds	r22, 0x012D
 430:	70 91 2e 01 	lds	r23, 0x012E
 434:	84 e6       	ldi	r24, 0x64	; 100
 436:	b1 de       	rcall	.-670    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 438:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_RESOLUTION:
            TB_SendAck(TB_ERR_OK, TB_param.resolution);
            break;
          case TB_PARAM_RFS_DISTANCE:
            TB_SendAck(TB_ERR_OK, TB_param.rfs_distance);
            break;
 43a:	e7 c1       	rjmp	.+974    	; 0x80a <TB_Decode+0x600>
// doplnit nastavitelné parametry
          default:
            TB_SendAck(TB_ERR_VALUE, 0);
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	ba 01       	movw	r22, r20
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	aa de       	rcall	.-684    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 446:	80 e0       	ldi	r24, 0x00	; 0
            TB_SendAck(TB_ERR_OK, TB_param.rfs_distance);
            break;
// doplnit nastavitelné parametry
          default:
            TB_SendAck(TB_ERR_VALUE, 0);
            break;
 448:	e0 c1       	rjmp	.+960    	; 0x80a <TB_Decode+0x600>
        }
      }
      break;
    case TB_CMD_SIO:
		switch (TB_bufIn[TB_BUF_MOTOR])
 44a:	20 91 46 01 	lds	r18, 0x0146
 44e:	21 30       	cpi	r18, 0x01	; 1
 450:	09 f4       	brne	.+2      	; 0x454 <TB_Decode+0x24a>
 452:	d8 c1       	rjmp	.+944    	; 0x804 <TB_Decode+0x5fa>
 454:	18 f0       	brcs	.+6      	; 0x45c <TB_Decode+0x252>
 456:	22 30       	cpi	r18, 0x02	; 2
 458:	41 f0       	breq	.+16     	; 0x46a <TB_Decode+0x260>
 45a:	4f c0       	rjmp	.+158    	; 0x4fa <TB_Decode+0x2f0>
		{
	        case 0:
				#ifdef TB_SIO_BANK_0_IMPLEMENTED
					return TB_CMD_SIO;
				#else
					TB_SendAck(TB_ERR_TYPE, 0); // invalid value
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	ba 01       	movw	r22, r20
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	9a de       	rcall	.-716    	; 0x19a <TB_SendAck>
				}
				break;
			default:
				TB_SendAck(TB_ERR_TYPE, 0); // invalid value
		}
		return TB_CMD_SIO;
 466:	8e e0       	ldi	r24, 0x0E	; 14
				#ifdef TB_SIO_BANK_0_IMPLEMENTED
					return TB_CMD_SIO;
				#else
					TB_SendAck(TB_ERR_TYPE, 0); // invalid value
				#endif
				break;
 468:	d0 c1       	rjmp	.+928    	; 0x80a <TB_Decode+0x600>
				#else
					TB_SendAck(TB_ERR_TYPE, 0); // invalid value
				#endif
				break;
			case 2:
				switch (TB_bufIn[TB_BUF_TYPE])
 46a:	20 91 45 01 	lds	r18, 0x0145
 46e:	21 30       	cpi	r18, 0x01	; 1
 470:	b9 f0       	breq	.+46     	; 0x4a0 <TB_Decode+0x296>
 472:	18 f0       	brcs	.+6      	; 0x47a <TB_Decode+0x270>
 474:	22 30       	cpi	r18, 0x02	; 2
 476:	39 f1       	breq	.+78     	; 0x4c6 <TB_Decode+0x2bc>
 478:	39 c0       	rjmp	.+114    	; 0x4ec <TB_Decode+0x2e2>
				{
					case 0:
						TB_out.b0 = (TB_Value != 0);
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	67 2b       	or	r22, r23
 47e:	68 2b       	or	r22, r24
 480:	69 2b       	or	r22, r25
 482:	09 f4       	brne	.+2      	; 0x486 <TB_Decode+0x27c>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	80 91 11 01 	lds	r24, 0x0111
 48a:	20 fb       	bst	r18, 0
 48c:	80 f9       	bld	r24, 0
 48e:	80 93 11 01 	sts	0x0111, r24

/******************************************************/
// send OK response from module
inline void TB_SendAckOK(void)
{
  TB_SendAck(100, 0);
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	ba 01       	movw	r22, r20
 498:	84 e6       	ldi	r24, 0x64	; 100
 49a:	7f de       	rcall	.-770    	; 0x19a <TB_SendAck>
				}
				break;
			default:
				TB_SendAck(TB_ERR_TYPE, 0); // invalid value
		}
		return TB_CMD_SIO;
 49c:	8e e0       	ldi	r24, 0x0E	; 14
 49e:	b5 c1       	rjmp	.+874    	; 0x80a <TB_Decode+0x600>
					case 0:
						TB_out.b0 = (TB_Value != 0);
						TB_SendAckOK();
						break;
					case 1:
						TB_out.b1 = (TB_Value != 0);
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	67 2b       	or	r22, r23
 4a4:	68 2b       	or	r22, r24
 4a6:	69 2b       	or	r22, r25
 4a8:	09 f4       	brne	.+2      	; 0x4ac <TB_Decode+0x2a2>
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	80 91 11 01 	lds	r24, 0x0111
 4b0:	20 fb       	bst	r18, 0
 4b2:	81 f9       	bld	r24, 1
 4b4:	80 93 11 01 	sts	0x0111, r24

/******************************************************/
// send OK response from module
inline void TB_SendAckOK(void)
{
  TB_SendAck(100, 0);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	ba 01       	movw	r22, r20
 4be:	84 e6       	ldi	r24, 0x64	; 100
 4c0:	6c de       	rcall	.-808    	; 0x19a <TB_SendAck>
				}
				break;
			default:
				TB_SendAck(TB_ERR_TYPE, 0); // invalid value
		}
		return TB_CMD_SIO;
 4c2:	8e e0       	ldi	r24, 0x0E	; 14
 4c4:	a2 c1       	rjmp	.+836    	; 0x80a <TB_Decode+0x600>
					case 1:
						TB_out.b1 = (TB_Value != 0);
						TB_SendAckOK();
						break;
					case 2:
						TB_out.b2 = (TB_Value != 0);
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	67 2b       	or	r22, r23
 4ca:	68 2b       	or	r22, r24
 4cc:	69 2b       	or	r22, r25
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <TB_Decode+0x2c8>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	80 91 11 01 	lds	r24, 0x0111
 4d6:	20 fb       	bst	r18, 0
 4d8:	82 f9       	bld	r24, 2
 4da:	80 93 11 01 	sts	0x0111, r24

/******************************************************/
// send OK response from module
inline void TB_SendAckOK(void)
{
  TB_SendAck(100, 0);
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	ba 01       	movw	r22, r20
 4e4:	84 e6       	ldi	r24, 0x64	; 100
 4e6:	59 de       	rcall	.-846    	; 0x19a <TB_SendAck>
				}
				break;
			default:
				TB_SendAck(TB_ERR_TYPE, 0); // invalid value
		}
		return TB_CMD_SIO;
 4e8:	8e e0       	ldi	r24, 0x0E	; 14
 4ea:	8f c1       	rjmp	.+798    	; 0x80a <TB_Decode+0x600>
					case 2:
						TB_out.b2 = (TB_Value != 0);
						TB_SendAckOK();
						break;
					default:
						TB_SendAck(TB_ERR_TYPE, 0); // invalid value
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	ba 01       	movw	r22, r20
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	52 de       	rcall	.-860    	; 0x19a <TB_SendAck>
				}
				break;
			default:
				TB_SendAck(TB_ERR_TYPE, 0); // invalid value
		}
		return TB_CMD_SIO;
 4f6:	8e e0       	ldi	r24, 0x0E	; 14
						TB_out.b2 = (TB_Value != 0);
						TB_SendAckOK();
						break;
					default:
						TB_SendAck(TB_ERR_TYPE, 0); // invalid value
					break;
 4f8:	88 c1       	rjmp	.+784    	; 0x80a <TB_Decode+0x600>
				}
				break;
			default:
				TB_SendAck(TB_ERR_TYPE, 0); // invalid value
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	ba 01       	movw	r22, r20
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	4b de       	rcall	.-874    	; 0x19a <TB_SendAck>
		}
		return TB_CMD_SIO;
 504:	8e e0       	ldi	r24, 0x0E	; 14
 506:	81 c1       	rjmp	.+770    	; 0x80a <TB_Decode+0x600>
		break;
    case TB_CMD_GIO:
		switch (TB_bufIn[TB_BUF_MOTOR])
 508:	80 91 46 01 	lds	r24, 0x0146
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	29 f0       	breq	.+10     	; 0x51a <TB_Decode+0x310>
 510:	30 f0       	brcs	.+12     	; 0x51e <TB_Decode+0x314>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	09 f4       	brne	.+2      	; 0x518 <TB_Decode+0x30e>
 516:	41 c0       	rjmp	.+130    	; 0x59a <TB_Decode+0x390>
 518:	77 c1       	rjmp	.+750    	; 0x808 <TB_Decode+0x5fe>
						break;
				}
				break;
			case 1: // analog inputs (2)
				//TB_SendAck(TB_ERR_VALUE, 0); // invalid value
				return TB_CMD_GIO;
 51a:	8f e0       	ldi	r24, 0x0F	; 15
 51c:	76 c1       	rjmp	.+748    	; 0x80a <TB_Decode+0x600>
		break;
    case TB_CMD_GIO:
		switch (TB_bufIn[TB_BUF_MOTOR])
		{
			case 0: // inputs (4)
				switch (TB_bufIn[TB_BUF_TYPE])
 51e:	80 91 45 01 	lds	r24, 0x0145
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	81 f0       	breq	.+32     	; 0x546 <TB_Decode+0x33c>
 526:	28 f0       	brcs	.+10     	; 0x532 <TB_Decode+0x328>
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	c1 f0       	breq	.+48     	; 0x55c <TB_Decode+0x352>
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	11 f1       	breq	.+68     	; 0x574 <TB_Decode+0x36a>
 530:	2d c0       	rjmp	.+90     	; 0x58c <TB_Decode+0x382>
				{
					case 0:
						TB_SendAck(TB_ERR_OK, TB_inp.b0);
 532:	40 91 41 01 	lds	r20, 0x0141
 536:	41 70       	andi	r20, 0x01	; 1
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	84 e6       	ldi	r24, 0x64	; 100
 540:	2c de       	rcall	.-936    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 542:	80 e0       	ldi	r24, 0x00	; 0
			case 0: // inputs (4)
				switch (TB_bufIn[TB_BUF_TYPE])
				{
					case 0:
						TB_SendAck(TB_ERR_OK, TB_inp.b0);
						break;
 544:	62 c1       	rjmp	.+708    	; 0x80a <TB_Decode+0x600>
		            case 1:
						TB_SendAck(TB_ERR_OK, TB_inp.b1);
 546:	40 91 41 01 	lds	r20, 0x0141
 54a:	46 95       	lsr	r20
 54c:	41 70       	andi	r20, 0x01	; 1
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	84 e6       	ldi	r24, 0x64	; 100
 556:	21 de       	rcall	.-958    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 558:	80 e0       	ldi	r24, 0x00	; 0
					case 0:
						TB_SendAck(TB_ERR_OK, TB_inp.b0);
						break;
		            case 1:
						TB_SendAck(TB_ERR_OK, TB_inp.b1);
						break;
 55a:	57 c1       	rjmp	.+686    	; 0x80a <TB_Decode+0x600>
					case 2:
						TB_SendAck(TB_ERR_OK, TB_inp.b2);
 55c:	40 91 41 01 	lds	r20, 0x0141
 560:	42 fb       	bst	r20, 2
 562:	44 27       	eor	r20, r20
 564:	40 f9       	bld	r20, 0
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	84 e6       	ldi	r24, 0x64	; 100
 56e:	15 de       	rcall	.-982    	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 570:	80 e0       	ldi	r24, 0x00	; 0
		            case 1:
						TB_SendAck(TB_ERR_OK, TB_inp.b1);
						break;
					case 2:
						TB_SendAck(TB_ERR_OK, TB_inp.b2);
						break;
 572:	4b c1       	rjmp	.+662    	; 0x80a <TB_Decode+0x600>
					case 3:
						TB_SendAck(TB_ERR_OK, TB_inp.b3);
 574:	40 91 41 01 	lds	r20, 0x0141
 578:	43 fb       	bst	r20, 3
 57a:	44 27       	eor	r20, r20
 57c:	40 f9       	bld	r20, 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	84 e6       	ldi	r24, 0x64	; 100
 586:	09 de       	rcall	.-1006   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 588:	80 e0       	ldi	r24, 0x00	; 0
					case 2:
						TB_SendAck(TB_ERR_OK, TB_inp.b2);
						break;
					case 3:
						TB_SendAck(TB_ERR_OK, TB_inp.b3);
						break;
 58a:	3f c1       	rjmp	.+638    	; 0x80a <TB_Decode+0x600>
					default:
						TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	ba 01       	movw	r22, r20
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	02 de       	rcall	.-1020   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 596:	80 e0       	ldi	r24, 0x00	; 0
					case 3:
						TB_SendAck(TB_ERR_OK, TB_inp.b3);
						break;
					default:
						TB_SendAck(TB_ERR_VALUE, 0); // invalid value
						break;
 598:	38 c1       	rjmp	.+624    	; 0x80a <TB_Decode+0x600>
			case 1: // analog inputs (2)
				//TB_SendAck(TB_ERR_VALUE, 0); // invalid value
				return TB_CMD_GIO;
				break;
			case 2: // outputs (2);
				switch (TB_bufIn[TB_BUF_TYPE])
 59a:	80 91 45 01 	lds	r24, 0x0145
 59e:	88 23       	and	r24, r24
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <TB_Decode+0x39e>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	59 f0       	breq	.+22     	; 0x5bc <TB_Decode+0x3b2>
 5a6:	15 c0       	rjmp	.+42     	; 0x5d2 <TB_Decode+0x3c8>
				{
					case 0:
						TB_SendAck(TB_ERR_OK, TB_out.b0);
 5a8:	40 91 11 01 	lds	r20, 0x0111
 5ac:	41 70       	andi	r20, 0x01	; 1
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	84 e6       	ldi	r24, 0x64	; 100
 5b6:	f1 dd       	rcall	.-1054   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
			case 2: // outputs (2);
				switch (TB_bufIn[TB_BUF_TYPE])
				{
					case 0:
						TB_SendAck(TB_ERR_OK, TB_out.b0);
						break;
 5ba:	27 c1       	rjmp	.+590    	; 0x80a <TB_Decode+0x600>
					case 1:
						TB_SendAck(TB_ERR_OK, TB_out.b1);
 5bc:	40 91 11 01 	lds	r20, 0x0111
 5c0:	46 95       	lsr	r20
 5c2:	41 70       	andi	r20, 0x01	; 1
 5c4:	50 e0       	ldi	r21, 0x00	; 0
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	84 e6       	ldi	r24, 0x64	; 100
 5cc:	e6 dd       	rcall	.-1076   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
					case 0:
						TB_SendAck(TB_ERR_OK, TB_out.b0);
						break;
					case 1:
						TB_SendAck(TB_ERR_OK, TB_out.b1);
						break;
 5d0:	1c c1       	rjmp	.+568    	; 0x80a <TB_Decode+0x600>
					default:
						TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	ba 01       	movw	r22, r20
 5d8:	84 e0       	ldi	r24, 0x04	; 4
 5da:	df dd       	rcall	.-1090   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
					case 1:
						TB_SendAck(TB_ERR_OK, TB_out.b1);
						break;
					default:
						TB_SendAck(TB_ERR_VALUE, 0); // invalid value
						break;
 5de:	15 c1       	rjmp	.+554    	; 0x80a <TB_Decode+0x600>
				break;
			default:
				TB_SendAck(TB_ERR_VALUE, TB_bufIn[TB_BUF_MOTOR]); // invalid value
				break;
		}*/
		return TB_CMD_VENTIL;
 5e0:	80 e1       	ldi	r24, 0x10	; 16
 5e2:	13 c1       	rjmp	.+550    	; 0x80a <TB_Decode+0x600>
		break;
	case TB_CMD_VZOREK:
		return TB_CMD_VZOREK;
 5e4:	81 e1       	ldi	r24, 0x11	; 17
 5e6:	11 c1       	rjmp	.+546    	; 0x80a <TB_Decode+0x600>
		break;
    case TB_CMD_RFS:
		return TB_CMD_RFS;
 5e8:	8d e0       	ldi	r24, 0x0D	; 13
 5ea:	0f c1       	rjmp	.+542    	; 0x80a <TB_Decode+0x600>
		break;
    case TB_CMD_SGP:
		if (TB_bufIn[TB_BUF_MOTOR] != 0)
 5ec:	20 91 46 01 	lds	r18, 0x0146
 5f0:	22 23       	and	r18, r18
 5f2:	39 f0       	breq	.+14     	; 0x602 <TB_Decode+0x3f8>
		{
			TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	ba 01       	movw	r22, r20
 5fa:	84 e0       	ldi	r24, 0x04	; 4
 5fc:	ce dd       	rcall	.-1124   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	04 c1       	rjmp	.+520    	; 0x80a <TB_Decode+0x600>
		{
			TB_SendAck(TB_ERR_VALUE, 0); // invalid value
		}
		else
		{
			switch (TB_bufIn[TB_BUF_TYPE])
 602:	20 91 45 01 	lds	r18, 0x0145
 606:	21 34       	cpi	r18, 0x41	; 65
 608:	41 f1       	breq	.+80     	; 0x65a <TB_Decode+0x450>
 60a:	18 f4       	brcc	.+6      	; 0x612 <TB_Decode+0x408>
 60c:	20 34       	cpi	r18, 0x40	; 64
 60e:	41 f0       	breq	.+16     	; 0x620 <TB_Decode+0x416>
 610:	7e c0       	rjmp	.+252    	; 0x70e <TB_Decode+0x504>
 612:	22 34       	cpi	r18, 0x42	; 66
 614:	09 f4       	brne	.+2      	; 0x618 <TB_Decode+0x40e>
 616:	3f c0       	rjmp	.+126    	; 0x696 <TB_Decode+0x48c>
 618:	2c 34       	cpi	r18, 0x4C	; 76
 61a:	09 f4       	brne	.+2      	; 0x61e <TB_Decode+0x414>
 61c:	5a c0       	rjmp	.+180    	; 0x6d2 <TB_Decode+0x4c8>
 61e:	77 c0       	rjmp	.+238    	; 0x70e <TB_Decode+0x504>
			{
				case TB_GBPARAM_EEMAGIC:
					if (TB_Value != TB_gbparam.eemagic)
 620:	00 91 3c 01 	lds	r16, 0x013C
 624:	10 e0       	ldi	r17, 0x00	; 0
 626:	20 e0       	ldi	r18, 0x00	; 0
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	60 17       	cp	r22, r16
 62c:	71 07       	cpc	r23, r17
 62e:	82 07       	cpc	r24, r18
 630:	93 07       	cpc	r25, r19
 632:	61 f0       	breq	.+24     	; 0x64c <TB_Decode+0x442>
					{
						TB_gbparam.eemagic = TB_Value;
 634:	60 93 3c 01 	sts	0x013C, r22
						b = (void *) &(TB_gbparam.eemagic) - (void *) &(TB_gbparam);
 638:	19 82       	std	Y+1, r1	; 0x01
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.eemagic);
 63a:	49 81       	ldd	r20, Y+1	; 0x01
 63c:	20 91 4c 01 	lds	r18, 0x014C
 640:	30 91 4d 01 	lds	r19, 0x014D
 644:	c9 01       	movw	r24, r18
 646:	84 0f       	add	r24, r20
 648:	91 1d       	adc	r25, r1
 64a:	32 d3       	rcall	.+1636   	; 0xcb0 <__eeupd_byte_m128a>
					}
					TB_SendAck(TB_ERR_OK, 0);
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	ba 01       	movw	r22, r20
 652:	84 e6       	ldi	r24, 0x64	; 100
 654:	a2 dd       	rcall	.-1212   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 656:	80 e0       	ldi	r24, 0x00	; 0
						TB_gbparam.eemagic = TB_Value;
						b = (void *) &(TB_gbparam.eemagic) - (void *) &(TB_gbparam);
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.eemagic);
					}
					TB_SendAck(TB_ERR_OK, 0);
					break;
 658:	d8 c0       	rjmp	.+432    	; 0x80a <TB_Decode+0x600>
				case TB_GBPARAM_BAUD:
					if (TB_Value != TB_gbparam.baud)
 65a:	00 91 3d 01 	lds	r16, 0x013D
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	60 17       	cp	r22, r16
 666:	71 07       	cpc	r23, r17
 668:	82 07       	cpc	r24, r18
 66a:	93 07       	cpc	r25, r19
 66c:	69 f0       	breq	.+26     	; 0x688 <TB_Decode+0x47e>
					{
						TB_gbparam.baud = TB_Value;
 66e:	60 93 3d 01 	sts	0x013D, r22
						b = (void *) &(TB_gbparam.baud) - (void *) &(TB_gbparam);
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	29 83       	std	Y+1, r18	; 0x01
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.baud);
 676:	49 81       	ldd	r20, Y+1	; 0x01
 678:	20 91 4c 01 	lds	r18, 0x014C
 67c:	30 91 4d 01 	lds	r19, 0x014D
 680:	c9 01       	movw	r24, r18
 682:	84 0f       	add	r24, r20
 684:	91 1d       	adc	r25, r1
 686:	14 d3       	rcall	.+1576   	; 0xcb0 <__eeupd_byte_m128a>
					}
					TB_SendAck(TB_ERR_OK, 0);
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	50 e0       	ldi	r21, 0x00	; 0
 68c:	ba 01       	movw	r22, r20
 68e:	84 e6       	ldi	r24, 0x64	; 100
 690:	84 dd       	rcall	.-1272   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 692:	80 e0       	ldi	r24, 0x00	; 0
						TB_gbparam.baud = TB_Value;
						b = (void *) &(TB_gbparam.baud) - (void *) &(TB_gbparam);
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.baud);
					}
					TB_SendAck(TB_ERR_OK, 0);
					break;
 694:	ba c0       	rjmp	.+372    	; 0x80a <TB_Decode+0x600>
				case TB_GBPARAM_ADDRESS:
					if (TB_Value != TB_gbparam.address)
 696:	00 91 3e 01 	lds	r16, 0x013E
 69a:	10 e0       	ldi	r17, 0x00	; 0
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	60 17       	cp	r22, r16
 6a2:	71 07       	cpc	r23, r17
 6a4:	82 07       	cpc	r24, r18
 6a6:	93 07       	cpc	r25, r19
 6a8:	69 f0       	breq	.+26     	; 0x6c4 <TB_Decode+0x4ba>
					{
						TB_gbparam.address = TB_Value;
 6aa:	60 93 3e 01 	sts	0x013E, r22
				        b = (void *) &(TB_gbparam.address) - (void *) &(TB_gbparam);
 6ae:	22 e0       	ldi	r18, 0x02	; 2
 6b0:	29 83       	std	Y+1, r18	; 0x01
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.address);
 6b2:	49 81       	ldd	r20, Y+1	; 0x01
 6b4:	20 91 4c 01 	lds	r18, 0x014C
 6b8:	30 91 4d 01 	lds	r19, 0x014D
 6bc:	c9 01       	movw	r24, r18
 6be:	84 0f       	add	r24, r20
 6c0:	91 1d       	adc	r25, r1
 6c2:	f6 d2       	rcall	.+1516   	; 0xcb0 <__eeupd_byte_m128a>
					}
					TB_SendAck(TB_ERR_OK, 0);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	ba 01       	movw	r22, r20
 6ca:	84 e6       	ldi	r24, 0x64	; 100
 6cc:	66 dd       	rcall	.-1332   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
						TB_gbparam.address = TB_Value;
				        b = (void *) &(TB_gbparam.address) - (void *) &(TB_gbparam);
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.address);
					}
					TB_SendAck(TB_ERR_OK, 0);
					break;
 6d0:	9c c0       	rjmp	.+312    	; 0x80a <TB_Decode+0x600>
				case TB_GBPARAM_HOST_ADDR:
					if (TB_Value != TB_gbparam.host_address)
 6d2:	00 91 40 01 	lds	r16, 0x0140
 6d6:	10 e0       	ldi	r17, 0x00	; 0
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	60 17       	cp	r22, r16
 6de:	71 07       	cpc	r23, r17
 6e0:	82 07       	cpc	r24, r18
 6e2:	93 07       	cpc	r25, r19
 6e4:	69 f0       	breq	.+26     	; 0x700 <TB_Decode+0x4f6>
					{
						TB_gbparam.host_address = TB_Value;
 6e6:	60 93 40 01 	sts	0x0140, r22
						b = (void *) &(TB_gbparam.host_address) - (void *) &(TB_gbparam);
 6ea:	24 e0       	ldi	r18, 0x04	; 4
 6ec:	29 83       	std	Y+1, r18	; 0x01
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.host_address);
 6ee:	49 81       	ldd	r20, Y+1	; 0x01
 6f0:	20 91 4c 01 	lds	r18, 0x014C
 6f4:	30 91 4d 01 	lds	r19, 0x014D
 6f8:	c9 01       	movw	r24, r18
 6fa:	84 0f       	add	r24, r20
 6fc:	91 1d       	adc	r25, r1
 6fe:	d8 d2       	rcall	.+1456   	; 0xcb0 <__eeupd_byte_m128a>
					}
					TB_SendAck(TB_ERR_OK, 0);
 700:	40 e0       	ldi	r20, 0x00	; 0
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	ba 01       	movw	r22, r20
 706:	84 e6       	ldi	r24, 0x64	; 100
 708:	48 dd       	rcall	.-1392   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 70a:	80 e0       	ldi	r24, 0x00	; 0
						TB_gbparam.host_address = TB_Value;
						b = (void *) &(TB_gbparam.host_address) - (void *) &(TB_gbparam);
						eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.host_address);
					}
					TB_SendAck(TB_ERR_OK, 0);
					break;
 70c:	7e c0       	rjmp	.+252    	; 0x80a <TB_Decode+0x600>
				default:
					TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	ba 01       	movw	r22, r20
 714:	84 e0       	ldi	r24, 0x04	; 4
 716:	41 dd       	rcall	.-1406   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 718:	80 e0       	ldi	r24, 0x00	; 0
					}
					TB_SendAck(TB_ERR_OK, 0);
					break;
				default:
					TB_SendAck(TB_ERR_VALUE, 0); // invalid value
					break;
 71a:	77 c0       	rjmp	.+238    	; 0x80a <TB_Decode+0x600>
			}
      }
      break;
    case TB_CMD_GGP:
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
 71c:	80 91 46 01 	lds	r24, 0x0146
 720:	88 23       	and	r24, r24
 722:	39 f0       	breq	.+14     	; 0x732 <TB_Decode+0x528>
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	ba 01       	movw	r22, r20
 72a:	84 e0       	ldi	r24, 0x04	; 4
 72c:	36 dd       	rcall	.-1428   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	6c c0       	rjmp	.+216    	; 0x80a <TB_Decode+0x600>
      break;
    case TB_CMD_GGP:
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
 732:	80 91 45 01 	lds	r24, 0x0145
 736:	81 34       	cpi	r24, 0x41	; 65
 738:	49 f0       	breq	.+18     	; 0x74c <TB_Decode+0x542>
 73a:	18 f4       	brcc	.+6      	; 0x742 <TB_Decode+0x538>
 73c:	80 34       	cpi	r24, 0x40	; 64
 73e:	09 f1       	breq	.+66     	; 0x782 <TB_Decode+0x578>
 740:	29 c0       	rjmp	.+82     	; 0x794 <TB_Decode+0x58a>
 742:	82 34       	cpi	r24, 0x42	; 66
 744:	61 f0       	breq	.+24     	; 0x75e <TB_Decode+0x554>
 746:	8c 34       	cpi	r24, 0x4C	; 76
 748:	99 f0       	breq	.+38     	; 0x770 <TB_Decode+0x566>
 74a:	24 c0       	rjmp	.+72     	; 0x794 <TB_Decode+0x58a>
          case TB_GBPARAM_BAUD:
            TB_SendAck(TB_ERR_OK, TB_gbparam.baud);
 74c:	40 91 3d 01 	lds	r20, 0x013D
 750:	50 e0       	ldi	r21, 0x00	; 0
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	84 e6       	ldi	r24, 0x64	; 100
 758:	20 dd       	rcall	.-1472   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 75a:	80 e0       	ldi	r24, 0x00	; 0
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
          case TB_GBPARAM_BAUD:
            TB_SendAck(TB_ERR_OK, TB_gbparam.baud);
            break;
 75c:	56 c0       	rjmp	.+172    	; 0x80a <TB_Decode+0x600>
          case TB_GBPARAM_ADDRESS:
            TB_SendAck(TB_ERR_OK, TB_gbparam.address);
 75e:	40 91 3e 01 	lds	r20, 0x013E
 762:	50 e0       	ldi	r21, 0x00	; 0
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	84 e6       	ldi	r24, 0x64	; 100
 76a:	17 dd       	rcall	.-1490   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 76c:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_BAUD:
            TB_SendAck(TB_ERR_OK, TB_gbparam.baud);
            break;
          case TB_GBPARAM_ADDRESS:
            TB_SendAck(TB_ERR_OK, TB_gbparam.address);
            break;
 76e:	4d c0       	rjmp	.+154    	; 0x80a <TB_Decode+0x600>
          case TB_GBPARAM_HOST_ADDR:
            TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
 770:	40 91 40 01 	lds	r20, 0x0140
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	84 e6       	ldi	r24, 0x64	; 100
 77c:	0e dd       	rcall	.-1508   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 77e:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_ADDRESS:
            TB_SendAck(TB_ERR_OK, TB_gbparam.address);
            break;
          case TB_GBPARAM_HOST_ADDR:
            TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
            break;
 780:	44 c0       	rjmp	.+136    	; 0x80a <TB_Decode+0x600>
          case TB_GBPARAM_EEMAGIC:
            TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
 782:	40 91 3c 01 	lds	r20, 0x013C
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	84 e6       	ldi	r24, 0x64	; 100
 78e:	05 dd       	rcall	.-1526   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 790:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_HOST_ADDR:
            TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
            break;
          case TB_GBPARAM_EEMAGIC:
            TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
            break;
 792:	3b c0       	rjmp	.+118    	; 0x80a <TB_Decode+0x600>
          default:
            TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	50 e0       	ldi	r21, 0x00	; 0
 798:	ba 01       	movw	r22, r20
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	fe dc       	rcall	.-1540   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 79e:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_EEMAGIC:
            TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
            break;
          default:
            TB_SendAck(TB_ERR_VALUE, 0); // invalid value
            break;
 7a0:	34 c0       	rjmp	.+104    	; 0x80a <TB_Decode+0x600>
        }
      }
      break;
    case 136: // get module version
      if (TB_bufIn[TB_BUF_TYPE] == 0) {
 7a2:	80 91 45 01 	lds	r24, 0x0145
 7a6:	81 11       	cpse	r24, r1
 7a8:	1c c0       	rjmp	.+56     	; 0x7e2 <TB_Decode+0x5d8>
        // text mode
        TB_bufOut[0] = TB_AddrReply;
 7aa:	80 91 4e 01 	lds	r24, 0x014E
 7ae:	80 93 33 01 	sts	0x0133, r24
        TB_bufOut[1] = SC_MODUL;
 7b2:	88 e0       	ldi	r24, 0x08	; 8
 7b4:	80 93 34 01 	sts	0x0134, r24
        TB_bufOut[2] = SC_VERZE;
 7b8:	10 92 35 01 	sts	0x0135, r1
        TB_bufOut[3] = (SC_ADRESS >> 8) & 0xFF;
 7bc:	10 92 36 01 	sts	0x0136, r1
        TB_bufOut[4] = SC_ADRESS & 0xFF;
 7c0:	84 e1       	ldi	r24, 0x14	; 20
 7c2:	80 93 37 01 	sts	0x0137, r24
        TB_bufOut[5] = 'V';
 7c6:	86 e5       	ldi	r24, 0x56	; 86
 7c8:	80 93 38 01 	sts	0x0138, r24
        TB_bufOut[6] = '2';
 7cc:	82 e3       	ldi	r24, 0x32	; 50
 7ce:	80 93 39 01 	sts	0x0139, r24
        TB_bufOut[7] = '0';
 7d2:	80 e3       	ldi	r24, 0x30	; 48
 7d4:	80 93 3a 01 	sts	0x013A, r24
        TB_bufOut[8] = '0';
 7d8:	80 93 3b 01 	sts	0x013B, r24
        TB_Send();
 7dc:	90 dc       	rcall	.-1760   	; 0xfe <TB_Send>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	14 c0       	rjmp	.+40     	; 0x80a <TB_Decode+0x600>
        TB_bufOut[7] = '0';
        TB_bufOut[8] = '0';
        TB_Send();
       } else {
        // binary mode
        TB_SendAck(TB_ERR_OK, (0x10203040));
 7e2:	40 e4       	ldi	r20, 0x40	; 64
 7e4:	50 e3       	ldi	r21, 0x30	; 48
 7e6:	60 e2       	ldi	r22, 0x20	; 32
 7e8:	70 e1       	ldi	r23, 0x10	; 16
 7ea:	84 e6       	ldi	r24, 0x64	; 100
 7ec:	d6 dc       	rcall	.-1620   	; 0x19a <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	0c c0       	rjmp	.+24     	; 0x80a <TB_Decode+0x600>
        // binary mode
        TB_SendAck(TB_ERR_OK, (0x10203040));
      };
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	ba 01       	movw	r22, r20
 7f8:	82 e0       	ldi	r24, 0x02	; 2
 7fa:	cf dc       	rcall	.-1634   	; 0x19a <TB_SendAck>
      return 0;
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <TB_Decode+0x600>
    case TB_CMD_ROL:
      TB_SendAck(TB_ERR_OK, 0);
      return TB_CMD_ROL;
      break;
    case TB_CMD_MVP:
      return TB_CMD_MVP;
 800:	84 e0       	ldi	r24, 0x04	; 4
 802:	03 c0       	rjmp	.+6      	; 0x80a <TB_Decode+0x600>
					TB_SendAck(TB_ERR_TYPE, 0); // invalid value
				#endif
				break;
			case 1:
				#ifdef TB_SIO_BANK_1_IMPLEMENTED
					return TB_CMD_SIO;
 804:	8e e0       	ldi	r24, 0x0E	; 14
 806:	01 c0       	rjmp	.+2      	; 0x80a <TB_Decode+0x600>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
 808:	80 e0       	ldi	r24, 0x00	; 0
}
 80a:	0f 90       	pop	r0
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	08 95       	ret

00000816 <uart_get_char>:
  return 9;
}

inline byte uart_rx_empty(void)
{
  return (uart0_buf_rx_ptr_e == uart0_buf_rx_ptr_b);
 816:	90 91 0d 01 	lds	r25, 0x010D
 81a:	80 91 0e 01 	lds	r24, 0x010E
  // read     -> b++, read *b
  // interrupt safe -> read *(b+1); b++
  byte ptr;
  byte res;
  
  if (uart_rx_empty()) return 0;
 81e:	98 17       	cp	r25, r24
 820:	61 f0       	breq	.+24     	; 0x83a <uart_get_char+0x24>

  ptr = (uart0_buf_rx_ptr_b+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
 822:	90 91 0e 01 	lds	r25, 0x010E
 826:	9f 5f       	subi	r25, 0xFF	; 255
 828:	9f 70       	andi	r25, 0x0F	; 15
  res = uart0_buf_rx[ptr];
 82a:	e9 2f       	mov	r30, r25
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	e8 51       	subi	r30, 0x18	; 24
 830:	fe 4f       	sbci	r31, 0xFE	; 254
 832:	80 81       	ld	r24, Z
  uart0_buf_rx_ptr_b = ptr;
 834:	90 93 0e 01 	sts	0x010E, r25
  return res;
 838:	08 95       	ret
  // read     -> b++, read *b
  // interrupt safe -> read *(b+1); b++
  byte ptr;
  byte res;
  
  if (uart_rx_empty()) return 0;
 83a:	80 e0       	ldi	r24, 0x00	; 0
  ptr = (uart0_buf_rx_ptr_b+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
  res = uart0_buf_rx[ptr];
  uart0_buf_rx_ptr_b = ptr;
  return res;
  
}
 83c:	08 95       	ret

0000083e <uart_receive_char>:
{
  // write    -> e++, write *e
  // interrupt safe -> write *(e+1); e++
  byte ptr;

  ptr = (uart0_buf_rx_ptr_e+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
 83e:	90 91 0d 01 	lds	r25, 0x010D
 842:	9f 5f       	subi	r25, 0xFF	; 255
 844:	9f 70       	andi	r25, 0x0F	; 15
  uart0_buf_rx[ptr] = dat;
 846:	e9 2f       	mov	r30, r25
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	e8 51       	subi	r30, 0x18	; 24
 84c:	fe 4f       	sbci	r31, 0xFE	; 254
 84e:	80 83       	st	Z, r24
  uart0_buf_rx_ptr_e = ptr;
 850:	90 93 0d 01 	sts	0x010D, r25
 854:	08 95       	ret

00000856 <uart_send_char>:
char uart_send_char(void)
{
  byte ptr;
  byte res;

  ptr = uart0_buf_tx_ptr;
 856:	90 91 0c 01 	lds	r25, 0x010C
  res = uart0_buf_tx[ptr];
 85a:	e9 2f       	mov	r30, r25
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	e1 5b       	subi	r30, 0xB1	; 177
 860:	fe 4f       	sbci	r31, 0xFE	; 254
 862:	80 81       	ld	r24, Z
  uart0_buf_tx_ptr = ptr+1;
 864:	9f 5f       	subi	r25, 0xFF	; 255
 866:	90 93 0c 01 	sts	0x010C, r25
  return res;
}
 86a:	08 95       	ret

0000086c <uart_send>:
/******************************************************/
// start sending TX buffer
/******************************************************/
void uart_send(void)
{
  if (uart0_flags.txing == false) {
 86c:	80 91 05 01 	lds	r24, 0x0105
 870:	80 fd       	sbrc	r24, 0
 872:	0a c0       	rjmp	.+20     	; 0x888 <uart_send+0x1c>
    // is some data in buffer ?
    uart0_flags.txing = true;
 874:	80 91 05 01 	lds	r24, 0x0105
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	80 93 05 01 	sts	0x0105, r24
    //uart0_tx_timeout = UART0_TX_TIMEOUT;
    UART0_TX_ENA;  // tx mode
 87e:	90 9a       	sbi	0x12, 0	; 18
    uart0_buf_tx_ptr = 0; // send first byte from buffer
 880:	10 92 0c 01 	sts	0x010C, r1
    UART0_PROC_UDR = uart_send_char();
 884:	e8 df       	rcall	.-48     	; 0x856 <uart_send_char>
 886:	8c b9       	out	0x0c, r24	; 12
 888:	08 95       	ret

0000088a <uart_interrupt_rx>:
/******************************************************/
// Enable/disable interrupts
/******************************************************/
void uart_interrupt_rx(byte enable)
{
  if (enable)
 88a:	88 23       	and	r24, r24
 88c:	11 f0       	breq	.+4      	; 0x892 <uart_interrupt_rx+0x8>
    UART0_PROC_UCSRB |= BV(UART0_PROC_RXCIE);
 88e:	57 9a       	sbi	0x0a, 7	; 10
 890:	08 95       	ret
   else
    UART0_PROC_UCSRB &= ~BV(UART0_PROC_RXCIE);
 892:	57 98       	cbi	0x0a, 7	; 10
 894:	08 95       	ret

00000896 <uart_interrupt_tx>:
}

void uart_interrupt_tx(byte enable)
{
  if (enable)
 896:	88 23       	and	r24, r24
 898:	11 f0       	breq	.+4      	; 0x89e <uart_interrupt_tx+0x8>
    UART0_PROC_UCSRB |= BV(UART0_PROC_TXCIE);
 89a:	56 9a       	sbi	0x0a, 6	; 10
 89c:	08 95       	ret
   else
    UART0_PROC_UCSRB &= ~BV(UART0_PROC_TXCIE);
 89e:	56 98       	cbi	0x0a, 6	; 10
 8a0:	08 95       	ret

000008a2 <__vector_18>:

/******************************************************/
//
/******************************************************/
ISR(UART0_PROC_RX_vect)
{
 8a2:	1f 92       	push	r1
 8a4:	0f 92       	push	r0
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	0f 92       	push	r0
 8aa:	11 24       	eor	r1, r1
 8ac:	0b b6       	in	r0, 0x3b	; 59
 8ae:	0f 92       	push	r0
 8b0:	2f 93       	push	r18
 8b2:	3f 93       	push	r19
 8b4:	4f 93       	push	r20
 8b6:	5f 93       	push	r21
 8b8:	6f 93       	push	r22
 8ba:	7f 93       	push	r23
 8bc:	8f 93       	push	r24
 8be:	9f 93       	push	r25
 8c0:	af 93       	push	r26
 8c2:	bf 93       	push	r27
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31
  byte tmpDat;
  byte tmpStatus;
  
  uart0_rx_timeout = UART0_TIMEOUT;
 8c8:	85 e0       	ldi	r24, 0x05	; 5
 8ca:	80 93 07 01 	sts	0x0107, r24
  tmpStatus = UART0_PROC_UCSRA;
 8ce:	8b b1       	in	r24, 0x0b	; 11
  uart0_status |= tmpStatus;
 8d0:	90 91 06 01 	lds	r25, 0x0106
 8d4:	89 2b       	or	r24, r25
 8d6:	80 93 06 01 	sts	0x0106, r24
  tmpDat = UART0_PROC_UDR;
 8da:	8c b1       	in	r24, 0x0c	; 12
  uart_receive_char(tmpDat);
 8dc:	b0 df       	rcall	.-160    	; 0x83e <uart_receive_char>
}
 8de:	ff 91       	pop	r31
 8e0:	ef 91       	pop	r30
 8e2:	bf 91       	pop	r27
 8e4:	af 91       	pop	r26
 8e6:	9f 91       	pop	r25
 8e8:	8f 91       	pop	r24
 8ea:	7f 91       	pop	r23
 8ec:	6f 91       	pop	r22
 8ee:	5f 91       	pop	r21
 8f0:	4f 91       	pop	r20
 8f2:	3f 91       	pop	r19
 8f4:	2f 91       	pop	r18
 8f6:	0f 90       	pop	r0
 8f8:	0b be       	out	0x3b, r0	; 59
 8fa:	0f 90       	pop	r0
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	0f 90       	pop	r0
 900:	1f 90       	pop	r1
 902:	18 95       	reti

00000904 <__vector_20>:

/******************************************************/
//
/******************************************************/
ISR(UART0_PROC_TX_vect)
{
 904:	1f 92       	push	r1
 906:	0f 92       	push	r0
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	0f 92       	push	r0
 90c:	11 24       	eor	r1, r1
 90e:	0b b6       	in	r0, 0x3b	; 59
 910:	0f 92       	push	r0
 912:	2f 93       	push	r18
 914:	3f 93       	push	r19
 916:	4f 93       	push	r20
 918:	5f 93       	push	r21
 91a:	6f 93       	push	r22
 91c:	7f 93       	push	r23
 91e:	8f 93       	push	r24
 920:	9f 93       	push	r25
 922:	af 93       	push	r26
 924:	bf 93       	push	r27
 926:	ef 93       	push	r30
 928:	ff 93       	push	r31
  byte tmpDat;

  // ???
  if (uart0_flags.txing == false) return;
 92a:	80 91 05 01 	lds	r24, 0x0105
 92e:	80 ff       	sbrs	r24, 0
 930:	0d c0       	rjmp	.+26     	; 0x94c <__vector_20+0x48>

  // is next data in buffer?
  if (uart0_buf_tx_ptr > 8) {
 932:	80 91 0c 01 	lds	r24, 0x010C
 936:	89 30       	cpi	r24, 0x09	; 9
 938:	38 f0       	brcs	.+14     	; 0x948 <__vector_20+0x44>
    // whole buffer was sended
    uart0_flags.txing = FALSE;
 93a:	80 91 05 01 	lds	r24, 0x0105
 93e:	8e 7f       	andi	r24, 0xFE	; 254
 940:	80 93 05 01 	sts	0x0105, r24
    // if whole packed was send, wait for response
    //uart0_flags.wait_tx = TRUE;
    UART0_TX_DIS;   // rx mode
 944:	90 98       	cbi	0x12, 0	; 18
    return;
 946:	02 c0       	rjmp	.+4      	; 0x94c <__vector_20+0x48>
  } else {
    // send next byte
    tmpDat = uart_send_char();
 948:	86 df       	rcall	.-244    	; 0x856 <uart_send_char>
    UART0_PROC_UDR = tmpDat;
 94a:	8c b9       	out	0x0c, r24	; 12
  }
}
 94c:	ff 91       	pop	r31
 94e:	ef 91       	pop	r30
 950:	bf 91       	pop	r27
 952:	af 91       	pop	r26
 954:	9f 91       	pop	r25
 956:	8f 91       	pop	r24
 958:	7f 91       	pop	r23
 95a:	6f 91       	pop	r22
 95c:	5f 91       	pop	r21
 95e:	4f 91       	pop	r20
 960:	3f 91       	pop	r19
 962:	2f 91       	pop	r18
 964:	0f 90       	pop	r0
 966:	0b be       	out	0x3b, r0	; 59
 968:	0f 90       	pop	r0
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	0f 90       	pop	r0
 96e:	1f 90       	pop	r1
 970:	18 95       	reti

00000972 <uart0_init>:
// Initialization
void uart0_init(void)
{
  // UART port

  UART0_PROC_UBRRL = (F_CPU / (16UL * UART0_DEFAULT_BAUD)) - 1;
 972:	87 e0       	ldi	r24, 0x07	; 7
 974:	89 b9       	out	0x09, r24	; 9

  UART0_PROC_UCSRB |= BV(UART0_PROC_TXEN) | BV(UART0_PROC_RXEN); /* tx/rx enable */
 976:	8a b1       	in	r24, 0x0a	; 10
 978:	88 61       	ori	r24, 0x18	; 24
 97a:	8a b9       	out	0x0a, r24	; 10

  uart_interrupt_rx(true);
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	85 df       	rcall	.-246    	; 0x88a <uart_interrupt_rx>
  uart_interrupt_tx(true);
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	89 df       	rcall	.-238    	; 0x896 <uart_interrupt_tx>
  uart0_status = 0;
 984:	10 92 06 01 	sts	0x0106, r1
 988:	08 95       	ret

0000098a <uart0_process>:
}

//----------------------------------------------------------
// process internal logic
void uart0_process(void)
{
 98a:	bf 92       	push	r11
 98c:	cf 92       	push	r12
 98e:	df 92       	push	r13
 990:	ef 92       	push	r14
 992:	ff 92       	push	r15
 994:	0f 93       	push	r16
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
  return ((uart0_buf_pac_rx_ptr_e - uart0_buf_pac_rx_ptr_b) & UART0_BUFFER_PACKET_SIZE_MAX);
}

inline byte uart_pac_tx_empty(void)
{
  return (uart0_buf_pac_tx_ptr_e == uart0_buf_pac_tx_ptr_b);
 99c:	90 91 0a 01 	lds	r25, 0x010A
 9a0:	80 91 0b 01 	lds	r24, 0x010B
  byte iptr;
  byte sum;
  byte *ptr;

  // pøedává zpravy na odvysílání z paketového do lineárního bufferu
  if (!uart_pac_tx_empty()) {
 9a4:	98 17       	cp	r25, r24
 9a6:	41 f1       	breq	.+80     	; 0x9f8 <uart0_process+0x6e>
    // jsou data k odesláni ?
    if ((!uart0_flags.txing)) {
 9a8:	80 91 05 01 	lds	r24, 0x0105
 9ac:	80 fd       	sbrc	r24, 0
 9ae:	24 c0       	rjmp	.+72     	; 0x9f8 <uart0_process+0x6e>
      // nevysíláme ?
      // zaèneme vysílat dalí zprávu
      iptr = (uart0_buf_pac_tx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 9b0:	50 91 0b 01 	lds	r21, 0x010B
 9b4:	5f 5f       	subi	r21, 0xFF	; 255
 9b6:	5f 70       	andi	r21, 0x0F	; 15
      ptr = (byte *) &(uart0_buf_pac_tx[iptr].b[0]);
 9b8:	85 2f       	mov	r24, r21
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	9c 01       	movw	r18, r24
 9be:	22 0f       	add	r18, r18
 9c0:	33 1f       	adc	r19, r19
 9c2:	22 0f       	add	r18, r18
 9c4:	33 1f       	adc	r19, r19
 9c6:	22 0f       	add	r18, r18
 9c8:	33 1f       	adc	r19, r19
 9ca:	82 0f       	add	r24, r18
 9cc:	93 1f       	adc	r25, r19
 9ce:	88 50       	subi	r24, 0x08	; 8
 9d0:	9e 4f       	sbci	r25, 0xFE	; 254
 9d2:	9c 01       	movw	r18, r24
 9d4:	27 5f       	subi	r18, 0xF7	; 247
 9d6:	3f 4f       	sbci	r19, 0xFF	; 255
 9d8:	fc 01       	movw	r30, r24
 9da:	df 01       	movw	r26, r30
 9dc:	a8 1b       	sub	r26, r24
 9de:	b9 0b       	sbc	r27, r25
      for (i=0; i<9; i++) {
        uart0_buf_tx[i] = *ptr;
 9e0:	41 91       	ld	r20, Z+
 9e2:	a1 5b       	subi	r26, 0xB1	; 177
 9e4:	be 4f       	sbci	r27, 0xFE	; 254
 9e6:	4c 93       	st	X, r20
    if ((!uart0_flags.txing)) {
      // nevysíláme ?
      // zaèneme vysílat dalí zprávu
      iptr = (uart0_buf_pac_tx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
      ptr = (byte *) &(uart0_buf_pac_tx[iptr].b[0]);
      for (i=0; i<9; i++) {
 9e8:	e2 17       	cp	r30, r18
 9ea:	f3 07       	cpc	r31, r19
 9ec:	b1 f7       	brne	.-20     	; 0x9da <uart0_process+0x50>
        uart0_buf_tx[i] = *ptr;
        ptr++;
      }
      uart0_buf_pac_tx_ptr_b = iptr;
 9ee:	50 93 0b 01 	sts	0x010B, r21
      uart0_buf_tx_ptr = 0;
 9f2:	10 92 0c 01 	sts	0x010C, r1
      uart_send();
 9f6:	3a df       	rcall	.-396    	; 0x86c <uart_send>
    }
  }

  // kontroluje pøijatá data
  if ((!uart0_flags.data_received) && (uart_rx_size() > 8)) {
 9f8:	80 91 05 01 	lds	r24, 0x0105
 9fc:	83 fd       	sbrc	r24, 3
 9fe:	4a c0       	rjmp	.+148    	; 0xa94 <uart0_process+0x10a>
/******************************************************/
// Useful functions
/******************************************************/
inline byte uart_rx_size(void)
{
  return ((uart0_buf_rx_ptr_e - uart0_buf_rx_ptr_b) & UART0_BUFFER_LINEAR_SIZE_MAX);
 a00:	80 91 0d 01 	lds	r24, 0x010D
 a04:	90 91 0e 01 	lds	r25, 0x010E
 a08:	89 1b       	sub	r24, r25
 a0a:	8f 70       	andi	r24, 0x0F	; 15
      uart_send();
    }
  }

  // kontroluje pøijatá data
  if ((!uart0_flags.data_received) && (uart_rx_size() > 8)) {
 a0c:	89 30       	cpi	r24, 0x09	; 9
 a0e:	08 f4       	brcc	.+2      	; 0xa12 <uart0_process+0x88>
 a10:	41 c0       	rjmp	.+130    	; 0xa94 <uart0_process+0x10a>
    // máme alespoò 9 bytù dat a nejsou nezpracovaná data?


    // zjístíme adresu volného místa v paketovém pøijímacm bufferu
    iptr = (uart0_buf_pac_rx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 a12:	b0 90 08 01 	lds	r11, 0x0108
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	8b 0d       	add	r24, r11
 a1a:	8f 70       	andi	r24, 0x0F	; 15
 a1c:	b8 2e       	mov	r11, r24
    ptr = (byte *) &(uart0_buf_pac_rx[iptr].b[0]);
 a1e:	e8 2e       	mov	r14, r24
 a20:	f1 2c       	mov	r15, r1
 a22:	f7 01       	movw	r30, r14
 a24:	ee 0f       	add	r30, r30
 a26:	ff 1f       	adc	r31, r31
 a28:	ee 0f       	add	r30, r30
 a2a:	ff 1f       	adc	r31, r31
 a2c:	ee 0f       	add	r30, r30
 a2e:	ff 1f       	adc	r31, r31
 a30:	ee 0d       	add	r30, r14
 a32:	ff 1d       	adc	r31, r15
 a34:	cf 01       	movw	r24, r30
 a36:	88 5a       	subi	r24, 0xA8	; 168
 a38:	9e 4f       	sbci	r25, 0xFE	; 254
 a3a:	6c 01       	movw	r12, r24
 a3c:	8c 01       	movw	r16, r24
 a3e:	07 5f       	subi	r16, 0xF7	; 247
 a40:	1f 4f       	sbci	r17, 0xFF	; 255
 a42:	ec 01       	movw	r28, r24

    // pøedáme do paketového pøijímacího bufferu
    for(i=0; i<9; i++) {
      *ptr = uart_get_char();
 a44:	e8 de       	rcall	.-560    	; 0x816 <uart_get_char>
 a46:	89 93       	st	Y+, r24
    // zjístíme adresu volného místa v paketovém pøijímacm bufferu
    iptr = (uart0_buf_pac_rx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    ptr = (byte *) &(uart0_buf_pac_rx[iptr].b[0]);

    // pøedáme do paketového pøijímacího bufferu
    for(i=0; i<9; i++) {
 a48:	c0 17       	cp	r28, r16
 a4a:	d1 07       	cpc	r29, r17
 a4c:	d9 f7       	brne	.-10     	; 0xa44 <uart0_process+0xba>
 a4e:	f6 01       	movw	r30, r12
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    // odpovídá kontrolní souèet?
    sum = 0;
    for(i=0; i<8; i++) {
      sum += uart0_buf_pac_rx[iptr].b[i];
 a54:	21 91       	ld	r18, Z+
 a56:	92 0f       	add	r25, r18
      //uart0_buf_pac_rx[0].b[i] = uart_get_char(); 
    }
    
    // odpovídá kontrolní souèet?
    sum = 0;
    for(i=0; i<8; i++) {
 a58:	8f 5f       	subi	r24, 0xFF	; 255
 a5a:	88 30       	cpi	r24, 0x08	; 8
 a5c:	d9 f7       	brne	.-10     	; 0xa54 <uart0_process+0xca>
      sum += uart0_buf_pac_rx[iptr].b[i];
    }
    if (sum == uart0_buf_pac_rx[iptr].b[8]) {
 a5e:	f7 01       	movw	r30, r14
 a60:	ee 0f       	add	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	ee 0f       	add	r30, r30
 a66:	ff 1f       	adc	r31, r31
 a68:	ee 0f       	add	r30, r30
 a6a:	ff 1f       	adc	r31, r31
 a6c:	ee 0d       	add	r30, r14
 a6e:	ff 1d       	adc	r31, r15
 a70:	e8 5a       	subi	r30, 0xA8	; 168
 a72:	fe 4f       	sbci	r31, 0xFE	; 254
 a74:	80 85       	ldd	r24, Z+8	; 0x08
 a76:	98 13       	cpse	r25, r24
 a78:	08 c0       	rjmp	.+16     	; 0xa8a <uart0_process+0x100>
      // souèet v poøádku
      uart0_flags.data_received = TRUE; 
 a7a:	80 91 05 01 	lds	r24, 0x0105
 a7e:	88 60       	ori	r24, 0x08	; 8
 a80:	80 93 05 01 	sts	0x0105, r24
      uart0_buf_pac_rx_ptr_e = iptr;
 a84:	b0 92 08 01 	sts	0x0108, r11
 a88:	05 c0       	rjmp	.+10     	; 0xa94 <uart0_process+0x10a>

     } else {
      uart0_flags.data_receive_error = TRUE;
 a8a:	80 91 05 01 	lds	r24, 0x0105
 a8e:	80 61       	ori	r24, 0x10	; 16
 a90:	80 93 05 01 	sts	0x0105, r24
    }
  }

}
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	1f 91       	pop	r17
 a9a:	0f 91       	pop	r16
 a9c:	ff 90       	pop	r15
 a9e:	ef 90       	pop	r14
 aa0:	df 90       	pop	r13
 aa2:	cf 90       	pop	r12
 aa4:	bf 90       	pop	r11
 aa6:	08 95       	ret

00000aa8 <uart0_ISR_timer>:
void uart0_ISR_timer(void)
{
  static byte uart0_rx_timeout_flag = 0;
  
  // smazání náhodnì pøijatých dat
  if (uart0_rx_timeout > 0) {
 aa8:	80 91 07 01 	lds	r24, 0x0107
 aac:	88 23       	and	r24, r24
 aae:	41 f0       	breq	.+16     	; 0xac0 <uart0_ISR_timer+0x18>
    uart0_rx_timeout--;
 ab0:	80 91 07 01 	lds	r24, 0x0107
 ab4:	81 50       	subi	r24, 0x01	; 1
 ab6:	80 93 07 01 	sts	0x0107, r24
    uart0_rx_timeout_flag = false;
 aba:	10 92 04 01 	sts	0x0104, r1
 abe:	08 95       	ret
    } else {
    if (!uart0_rx_timeout_flag) {
 ac0:	80 91 04 01 	lds	r24, 0x0104
 ac4:	81 11       	cpse	r24, r1
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <uart0_ISR_timer+0x2e>
      uart0_buf_rx_ptr_b = uart0_buf_rx_ptr_e;
 ac8:	80 91 0d 01 	lds	r24, 0x010D
 acc:	80 93 0e 01 	sts	0x010E, r24
      uart0_rx_timeout_flag = true;
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	80 93 04 01 	sts	0x0104, r24
 ad6:	08 95       	ret

00000ad8 <uart0_get_data_begin>:
// must be called uart0_get_data_end() at end of handling data
byte * uart0_get_data_begin(void)
{
  byte iptr;
  
  iptr = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 ad8:	80 91 09 01 	lds	r24, 0x0109
 adc:	8f 5f       	subi	r24, 0xFF	; 255
 ade:	8f 70       	andi	r24, 0x0F	; 15
  return (byte *) &uart0_buf_pac_rx[iptr].b[0];
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	9c 01       	movw	r18, r24
 ae4:	22 0f       	add	r18, r18
 ae6:	33 1f       	adc	r19, r19
 ae8:	22 0f       	add	r18, r18
 aea:	33 1f       	adc	r19, r19
 aec:	22 0f       	add	r18, r18
 aee:	33 1f       	adc	r19, r19
 af0:	82 0f       	add	r24, r18
 af2:	93 1f       	adc	r25, r19
}
 af4:	88 5a       	subi	r24, 0xA8	; 168
 af6:	9e 4f       	sbci	r25, 0xFE	; 254
 af8:	08 95       	ret

00000afa <uart0_get_data_end>:
// must be called after uart0_get_data_begin()
byte uart0_get_data_end(void)
{
  byte i;
  
  i = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 afa:	80 91 09 01 	lds	r24, 0x0109
 afe:	8f 5f       	subi	r24, 0xFF	; 255
 b00:	8f 70       	andi	r24, 0x0F	; 15
  uart0_buf_pac_rx_ptr_b = i;
 b02:	80 93 09 01 	sts	0x0109, r24
  return (uart0_buf_pac_rx_ptr_e == uart0_buf_pac_rx_ptr_b);
}

inline byte uart_pac_rx_size(void)
{
  return ((uart0_buf_pac_rx_ptr_e - uart0_buf_pac_rx_ptr_b) & UART0_BUFFER_PACKET_SIZE_MAX);
 b06:	80 91 08 01 	lds	r24, 0x0108
 b0a:	90 91 09 01 	lds	r25, 0x0109
 b0e:	89 1b       	sub	r24, r25
 b10:	8f 70       	andi	r24, 0x0F	; 15
  
  i = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
  uart0_buf_pac_rx_ptr_b = i;
  
  i = uart_pac_rx_size();
  if (i == 0) {
 b12:	29 f4       	brne	.+10     	; 0xb1e <uart0_get_data_end+0x24>
    uart0_flags.data_received = FALSE;
 b14:	90 91 05 01 	lds	r25, 0x0105
 b18:	97 7f       	andi	r25, 0xF7	; 247
 b1a:	90 93 05 01 	sts	0x0105, r25
  }
  return i;
}
 b1e:	08 95       	ret

00000b20 <uart0_put_data>:


//----------------------------------------------------------
// send packet pointed by dataptr
void uart0_put_data(byte * dataptr)
{
 b20:	fc 01       	movw	r30, r24
  byte i;
  byte iptr;
  byte sum;

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 b22:	50 91 0a 01 	lds	r21, 0x010A
 b26:	5f 5f       	subi	r21, 0xFF	; 255
 b28:	5f 70       	andi	r21, 0x0F	; 15

  sum = 0;
  // copy data with sum
  for(i=0; i<8; i++) {
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
 b2a:	85 2f       	mov	r24, r21
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	dc 01       	movw	r26, r24
 b30:	aa 0f       	add	r26, r26
 b32:	bb 1f       	adc	r27, r27
 b34:	aa 0f       	add	r26, r26
 b36:	bb 1f       	adc	r27, r27
 b38:	aa 0f       	add	r26, r26
 b3a:	bb 1f       	adc	r27, r27
 b3c:	a8 0f       	add	r26, r24
 b3e:	b9 1f       	adc	r27, r25
 b40:	a8 50       	subi	r26, 0x08	; 8
 b42:	be 4f       	sbci	r27, 0xFE	; 254
  byte iptr;
  byte sum;

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;

  sum = 0;
 b44:	30 e0       	ldi	r19, 0x00	; 0
  // copy data with sum
  for(i=0; i<8; i++) {
 b46:	20 e0       	ldi	r18, 0x00	; 0
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
 b48:	40 81       	ld	r20, Z
 b4a:	4d 93       	st	X+, r20
    sum += *dataptr;
 b4c:	41 91       	ld	r20, Z+
 b4e:	34 0f       	add	r19, r20

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;

  sum = 0;
  // copy data with sum
  for(i=0; i<8; i++) {
 b50:	2f 5f       	subi	r18, 0xFF	; 255
 b52:	28 30       	cpi	r18, 0x08	; 8
 b54:	c9 f7       	brne	.-14     	; 0xb48 <uart0_put_data+0x28>
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
    sum += *dataptr;
    dataptr++;
  }
  uart0_buf_pac_tx[iptr].n.sum = sum; // save calculated sum
 b56:	fc 01       	movw	r30, r24
 b58:	ee 0f       	add	r30, r30
 b5a:	ff 1f       	adc	r31, r31
 b5c:	ee 0f       	add	r30, r30
 b5e:	ff 1f       	adc	r31, r31
 b60:	ee 0f       	add	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	8e 0f       	add	r24, r30
 b66:	9f 1f       	adc	r25, r31
 b68:	fc 01       	movw	r30, r24
 b6a:	e8 50       	subi	r30, 0x08	; 8
 b6c:	fe 4f       	sbci	r31, 0xFE	; 254
 b6e:	30 87       	std	Z+8, r19	; 0x08

  uart0_buf_pac_tx_ptr_e = iptr;
 b70:	50 93 0a 01 	sts	0x010A, r21
 b74:	08 95       	ret

00000b76 <uart0_set_baud>:
// Set from default baud rates
#define MACRO_BAUDRATE(BAUDRATE) (UART0_PROC_UBRRL = (F_CPU / (16UL * BAUDRATE)) - 1)
void uart0_set_baud(byte baud)
{
  // UART port
  switch (baud) {
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	8b 30       	cpi	r24, 0x0B	; 11
 b7a:	91 05       	cpc	r25, r1
 b7c:	20 f5       	brcc	.+72     	; 0xbc6 <uart0_set_baud+0x50>
 b7e:	fc 01       	movw	r30, r24
 b80:	ea 5b       	subi	r30, 0xBA	; 186
 b82:	ff 4f       	sbci	r31, 0xFF	; 255
 b84:	7f c0       	rjmp	.+254    	; 0xc84 <__tablejump2__>
    case 0:  
      MACRO_BAUDRATE(9600);
 b86:	8f e5       	ldi	r24, 0x5F	; 95
 b88:	89 b9       	out	0x09, r24	; 9
      break;
 b8a:	08 95       	ret
    case 1:  
      MACRO_BAUDRATE(14400);
 b8c:	8f e3       	ldi	r24, 0x3F	; 63
 b8e:	89 b9       	out	0x09, r24	; 9
      break;
 b90:	08 95       	ret
    case 2:  
      MACRO_BAUDRATE(19200);
 b92:	8f e2       	ldi	r24, 0x2F	; 47
 b94:	89 b9       	out	0x09, r24	; 9
      break;
 b96:	08 95       	ret
    case 3:  
      MACRO_BAUDRATE(28800);
 b98:	8f e1       	ldi	r24, 0x1F	; 31
 b9a:	89 b9       	out	0x09, r24	; 9
      break;
 b9c:	08 95       	ret
    case 4:  
      MACRO_BAUDRATE(38400);
 b9e:	87 e1       	ldi	r24, 0x17	; 23
 ba0:	89 b9       	out	0x09, r24	; 9
      break;
 ba2:	08 95       	ret
    case 5:  
      MACRO_BAUDRATE(57600);
 ba4:	8f e0       	ldi	r24, 0x0F	; 15
 ba6:	89 b9       	out	0x09, r24	; 9
      break;
 ba8:	08 95       	ret
    case 6:  
      MACRO_BAUDRATE(76800);
 baa:	8b e0       	ldi	r24, 0x0B	; 11
 bac:	89 b9       	out	0x09, r24	; 9
      break;
 bae:	08 95       	ret
    case 7:  
      MACRO_BAUDRATE(115200);
 bb0:	87 e0       	ldi	r24, 0x07	; 7
 bb2:	89 b9       	out	0x09, r24	; 9
      break;
 bb4:	08 95       	ret
    case 8:  
      MACRO_BAUDRATE(230400);
 bb6:	83 e0       	ldi	r24, 0x03	; 3
 bb8:	89 b9       	out	0x09, r24	; 9
      break;
 bba:	08 95       	ret
    case 9:  
      MACRO_BAUDRATE(250000);
 bbc:	82 e0       	ldi	r24, 0x02	; 2
 bbe:	89 b9       	out	0x09, r24	; 9
      break;
 bc0:	08 95       	ret
    case 10:  
      MACRO_BAUDRATE(500000);
 bc2:	19 b8       	out	0x09, r1	; 9
      break;
 bc4:	08 95       	ret
    default:  
      MACRO_BAUDRATE(19200);
 bc6:	8f e2       	ldi	r24, 0x2F	; 47
 bc8:	89 b9       	out	0x09, r24	; 9
 bca:	08 95       	ret

00000bcc <send_data>:



void send_data(void)
{
	uart0_put_data((byte *) &TB_bufOut);
 bcc:	83 e3       	ldi	r24, 0x33	; 51
 bce:	91 e0       	ldi	r25, 0x01	; 1
 bd0:	a7 cf       	rjmp	.-178    	; 0xb20 <uart0_put_data>
 bd2:	08 95       	ret

00000bd4 <__vector_11>:
}

//----------------------------------------------------------
ISR(TIMER1_CAPT_vect) {
 bd4:	1f 92       	push	r1
 bd6:	0f 92       	push	r0
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	0f 92       	push	r0
 bdc:	11 24       	eor	r1, r1
 bde:	8f 93       	push	r24
	// T = 10ms
	
	timer0_flag = TRUE;
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	80 93 10 01 	sts	0x0110, r24
	
}
 be6:	8f 91       	pop	r24
 be8:	0f 90       	pop	r0
 bea:	0f be       	out	0x3f, r0	; 63
 bec:	0f 90       	pop	r0
 bee:	1f 90       	pop	r1
 bf0:	18 95       	reti

00000bf2 <process_timer_100Hz>:

//----------------------------------------------------------
void process_timer_100Hz(void)
{
	if (timer0_flag) { // T = 10ms
 bf2:	80 91 10 01 	lds	r24, 0x0110
 bf6:	88 23       	and	r24, r24
 bf8:	81 f0       	breq	.+32     	; 0xc1a <process_timer_100Hz+0x28>
		timer0_flag = false;
 bfa:	10 92 10 01 	sts	0x0110, r1
		uart0_ISR_timer();
 bfe:	54 df       	rcall	.-344    	; 0xaa8 <uart0_ISR_timer>
		if (led_timer > 0) {
 c00:	80 91 0f 01 	lds	r24, 0x010F
 c04:	88 23       	and	r24, r24
 c06:	49 f0       	breq	.+18     	; 0xc1a <process_timer_100Hz+0x28>
			led_timer--;
 c08:	81 50       	subi	r24, 0x01	; 1
 c0a:	80 93 0f 01 	sts	0x010F, r24
			if (led_timer == 0) {
 c0e:	81 11       	cpse	r24, r1
 c10:	04 c0       	rjmp	.+8      	; 0xc1a <process_timer_100Hz+0x28>
				PORTB ^= (1 << PINB4);
 c12:	98 b3       	in	r25, 0x18	; 24
 c14:	80 e1       	ldi	r24, 0x10	; 16
 c16:	89 27       	eor	r24, r25
 c18:	88 bb       	out	0x18, r24	; 24
 c1a:	08 95       	ret

00000c1c <try_receive_data>:
void try_receive_data(void)
{
	byte i;
	byte *ptr;
	
	if (uart0_flags.data_received)
 c1c:	80 91 05 01 	lds	r24, 0x0105
 c20:	83 ff       	sbrs	r24, 3
 c22:	15 c0       	rjmp	.+42     	; 0xc4e <try_receive_data+0x32>
	{
		ptr = uart0_get_data_begin();
 c24:	59 df       	rcall	.-334    	; 0xad8 <uart0_get_data_begin>
 c26:	dc 01       	movw	r26, r24
 c28:	e3 e4       	ldi	r30, 0x43	; 67
 c2a:	f1 e0       	ldi	r31, 0x01	; 1
 c2c:	8c e4       	ldi	r24, 0x4C	; 76
 c2e:	91 e0       	ldi	r25, 0x01	; 1
		for (i=0; i<9; i++)
		{
			TB_bufIn[i] = *ptr;
 c30:	2d 91       	ld	r18, X+
 c32:	21 93       	st	Z+, r18
	byte *ptr;
	
	if (uart0_flags.data_received)
	{
		ptr = uart0_get_data_begin();
		for (i=0; i<9; i++)
 c34:	e8 17       	cp	r30, r24
 c36:	f9 07       	cpc	r31, r25
 c38:	d9 f7       	brne	.-10     	; 0xc30 <try_receive_data+0x14>
		{
			TB_bufIn[i] = *ptr;
			ptr++;
		}
		uart0_get_data_end();
 c3a:	5f df       	rcall	.-322    	; 0xafa <uart0_get_data_end>
		uart0_flags.data_received = FALSE;
 c3c:	80 91 05 01 	lds	r24, 0x0105
 c40:	87 7f       	andi	r24, 0xF7	; 247
 c42:	80 93 05 01 	sts	0x0105, r24
		if (TB_Read() == 0)
 c46:	c2 da       	rcall	.-2684   	; 0x1cc <TB_Read>
 c48:	81 11       	cpse	r24, r1
 c4a:	01 c0       	rjmp	.+2      	; 0xc4e <try_receive_data+0x32>
		{
			switch (TB_Decode())
 c4c:	de ca       	rjmp	.-2628   	; 0x20a <TB_Decode>
 c4e:	08 95       	ret

00000c50 <main>:
*/


int main(void)
{
	DDRA |= (1 << DDRD6);
 c50:	d6 9a       	sbi	0x1a, 6	; 26
	PORTA &= ~(1 << PINA6);
 c52:	de 98       	cbi	0x1b, 6	; 27
	
	
	//Nastavení Systemového enable pro RS485 pro UART0	
	DDRD |= (1 << DDRD0);
 c54:	88 9a       	sbi	0x11, 0	; 17
	
	//PreruseniBlackBox_Init();
		
	timer_init();
 c56:	43 da       	rcall	.-2938   	; 0xde <timer_init>
	
	uart0_init();
 c58:	8c de       	rcall	.-744    	; 0x972 <uart0_init>
	PORTA |= (1 << PINA6);
 c5a:	de 9a       	sbi	0x1b, 6	; 27
	TB_Callback_setBaud = &uart0_set_baud;
 c5c:	8b eb       	ldi	r24, 0xBB	; 187
 c5e:	95 e0       	ldi	r25, 0x05	; 5
 c60:	90 93 01 01 	sts	0x0101, r25
 c64:	80 93 00 01 	sts	0x0100, r24
	TB_Callback_TX = &send_data;
 c68:	86 ee       	ldi	r24, 0xE6	; 230
 c6a:	95 e0       	ldi	r25, 0x05	; 5
 c6c:	90 93 03 01 	sts	0x0103, r25
 c70:	80 93 02 01 	sts	0x0102, r24
	TB_Init((void*) 0x10); // addr in eeprom with settings
 c74:	80 e1       	ldi	r24, 0x10	; 16
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	57 da       	rcall	.-2898   	; 0x128 <TB_Init>
	
	sei();
 c7a:	78 94       	sei
	
    while(1)
    {
		process_timer_100Hz();
 c7c:	ba df       	rcall	.-140    	; 0xbf2 <process_timer_100Hz>
		uart0_process();
 c7e:	85 de       	rcall	.-758    	; 0x98a <uart0_process>
		try_receive_data();
 c80:	cd df       	rcall	.-102    	; 0xc1c <try_receive_data>
 c82:	fc cf       	rjmp	.-8      	; 0xc7c <main+0x2c>

00000c84 <__tablejump2__>:
 c84:	ee 0f       	add	r30, r30
 c86:	ff 1f       	adc	r31, r31

00000c88 <__tablejump__>:
 c88:	05 90       	lpm	r0, Z+
 c8a:	f4 91       	lpm	r31, Z
 c8c:	e0 2d       	mov	r30, r0
 c8e:	09 94       	ijmp

00000c90 <__eerd_block_m128a>:
 c90:	dc 01       	movw	r26, r24
 c92:	cb 01       	movw	r24, r22

00000c94 <__eerd_blraw_m128a>:
 c94:	fc 01       	movw	r30, r24
 c96:	e1 99       	sbic	0x1c, 1	; 28
 c98:	fe cf       	rjmp	.-4      	; 0xc96 <__eerd_blraw_m128a+0x2>
 c9a:	06 c0       	rjmp	.+12     	; 0xca8 <__eerd_blraw_m128a+0x14>
 c9c:	ff bb       	out	0x1f, r31	; 31
 c9e:	ee bb       	out	0x1e, r30	; 30
 ca0:	e0 9a       	sbi	0x1c, 0	; 28
 ca2:	31 96       	adiw	r30, 0x01	; 1
 ca4:	0d b2       	in	r0, 0x1d	; 29
 ca6:	0d 92       	st	X+, r0
 ca8:	41 50       	subi	r20, 0x01	; 1
 caa:	50 40       	sbci	r21, 0x00	; 0
 cac:	b8 f7       	brcc	.-18     	; 0xc9c <__eerd_blraw_m128a+0x8>
 cae:	08 95       	ret

00000cb0 <__eeupd_byte_m128a>:
 cb0:	26 2f       	mov	r18, r22

00000cb2 <__eeupd_r18_m128a>:
 cb2:	e1 99       	sbic	0x1c, 1	; 28
 cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <__eeupd_r18_m128a>
 cb6:	9f bb       	out	0x1f, r25	; 31
 cb8:	8e bb       	out	0x1e, r24	; 30
 cba:	e0 9a       	sbi	0x1c, 0	; 28
 cbc:	01 97       	sbiw	r24, 0x01	; 1
 cbe:	0d b2       	in	r0, 0x1d	; 29
 cc0:	02 16       	cp	r0, r18
 cc2:	31 f0       	breq	.+12     	; 0xcd0 <__eeupd_r18_m128a+0x1e>
 cc4:	2d bb       	out	0x1d, r18	; 29
 cc6:	0f b6       	in	r0, 0x3f	; 63
 cc8:	f8 94       	cli
 cca:	e2 9a       	sbi	0x1c, 2	; 28
 ccc:	e1 9a       	sbi	0x1c, 1	; 28
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	08 95       	ret

00000cd2 <__eewr_block_m128a>:
 cd2:	dc 01       	movw	r26, r24
 cd4:	cb 01       	movw	r24, r22
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <__eewr_block_m128a+0xa>
 cd8:	2d 91       	ld	r18, X+
 cda:	05 d0       	rcall	.+10     	; 0xce6 <__eewr_r18_m128a>
 cdc:	41 50       	subi	r20, 0x01	; 1
 cde:	50 40       	sbci	r21, 0x00	; 0
 ce0:	d8 f7       	brcc	.-10     	; 0xcd8 <__eewr_block_m128a+0x6>
 ce2:	08 95       	ret

00000ce4 <__eewr_byte_m128a>:
 ce4:	26 2f       	mov	r18, r22

00000ce6 <__eewr_r18_m128a>:
 ce6:	e1 99       	sbic	0x1c, 1	; 28
 ce8:	fe cf       	rjmp	.-4      	; 0xce6 <__eewr_r18_m128a>
 cea:	9f bb       	out	0x1f, r25	; 31
 cec:	8e bb       	out	0x1e, r24	; 30
 cee:	2d bb       	out	0x1d, r18	; 29
 cf0:	0f b6       	in	r0, 0x3f	; 63
 cf2:	f8 94       	cli
 cf4:	e2 9a       	sbi	0x1c, 2	; 28
 cf6:	e1 9a       	sbi	0x1c, 1	; 28
 cf8:	0f be       	out	0x3f, r0	; 63
 cfa:	01 96       	adiw	r24, 0x01	; 1
 cfc:	08 95       	ret

00000cfe <_exit>:
 cfe:	f8 94       	cli

00000d00 <__stop_program>:
 d00:	ff cf       	rjmp	.-2      	; 0xd00 <__stop_program>
